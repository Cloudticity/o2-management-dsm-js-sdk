/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AntiMalwareConfiguration', 'model/AntiMalwareConfigurations', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AntiMalwareConfiguration'), require('../model/AntiMalwareConfigurations'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.AntiMalwareConfigurationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.AntiMalwareConfiguration, root.Deepsecurity.AntiMalwareConfigurations, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, AntiMalwareConfiguration, AntiMalwareConfigurations, SearchFilter) {
  'use strict';

  /**
   * AntiMalwareConfigurations service.
   * @module api/AntiMalwareConfigurationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new AntiMalwareConfigurationsApi. 
   * @alias module:api/AntiMalwareConfigurationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Anti-Malware Configuration
     * Create a new anti-malware configuration.
     * @param {module:model/AntiMalwareConfiguration} antiMalwareConfiguration The settings of the new anti-malware configuration.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AntiMalwareConfiguration} and HTTP response
     */
    this.createAntiMalwareWithHttpInfo = function(antiMalwareConfiguration, apiVersion) {
      var postBody = antiMalwareConfiguration;

      // verify the required parameter 'antiMalwareConfiguration' is set
      if (antiMalwareConfiguration === undefined || antiMalwareConfiguration === null) {
        throw new Error("Missing the required parameter 'antiMalwareConfiguration' when calling createAntiMalware");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createAntiMalware");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AntiMalwareConfiguration;

      return this.apiClient.callApi(
        '/antimalwareconfigurations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Anti-Malware Configuration
     * Create a new anti-malware configuration.
     * @param {module:model/AntiMalwareConfiguration} antiMalwareConfiguration The settings of the new anti-malware configuration.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AntiMalwareConfiguration}
     */
    this.createAntiMalware = function(antiMalwareConfiguration, apiVersion) {
      return this.createAntiMalwareWithHttpInfo(antiMalwareConfiguration, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Anti-Malware Configuration
     * Delete an anti-malware configuration by ID.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAntiMalwareWithHttpInfo = function(antiMalwareID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'antiMalwareID' is set
      if (antiMalwareID === undefined || antiMalwareID === null) {
        throw new Error("Missing the required parameter 'antiMalwareID' when calling deleteAntiMalware");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteAntiMalware");
      }


      var pathParams = {
        'antiMalwareID': antiMalwareID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/antimalwareconfigurations/{antiMalwareID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Anti-Malware Configuration
     * Delete an anti-malware configuration by ID.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAntiMalware = function(antiMalwareID, apiVersion) {
      return this.deleteAntiMalwareWithHttpInfo(antiMalwareID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Anti-Malware Configuration
     * Describe an anti-malware configuration by ID.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AntiMalwareConfiguration} and HTTP response
     */
    this.describeAntiMalwareWithHttpInfo = function(antiMalwareID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'antiMalwareID' is set
      if (antiMalwareID === undefined || antiMalwareID === null) {
        throw new Error("Missing the required parameter 'antiMalwareID' when calling describeAntiMalware");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeAntiMalware");
      }


      var pathParams = {
        'antiMalwareID': antiMalwareID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AntiMalwareConfiguration;

      return this.apiClient.callApi(
        '/antimalwareconfigurations/{antiMalwareID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Anti-Malware Configuration
     * Describe an anti-malware configuration by ID.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AntiMalwareConfiguration}
     */
    this.describeAntiMalware = function(antiMalwareID, apiVersion) {
      return this.describeAntiMalwareWithHttpInfo(antiMalwareID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Anti-Malware Configurations
     * Lists all anti-malware configurations.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AntiMalwareConfigurations} and HTTP response
     */
    this.listAntiMalwaresWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listAntiMalwares");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AntiMalwareConfigurations;

      return this.apiClient.callApi(
        '/antimalwareconfigurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Anti-Malware Configurations
     * Lists all anti-malware configurations.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AntiMalwareConfigurations}
     */
    this.listAntiMalwares = function(apiVersion) {
      return this.listAntiMalwaresWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Anti-Malware Configuration
     * Modify an anti-malware configuration by ID. Any unset elements will be left unchanged.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to modify.
     * @param {module:model/AntiMalwareConfiguration} antiMalwareConfiguration The settings of the anti-malware configuration to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AntiMalwareConfiguration} and HTTP response
     */
    this.modifyAntiMalwareWithHttpInfo = function(antiMalwareID, antiMalwareConfiguration, apiVersion) {
      var postBody = antiMalwareConfiguration;

      // verify the required parameter 'antiMalwareID' is set
      if (antiMalwareID === undefined || antiMalwareID === null) {
        throw new Error("Missing the required parameter 'antiMalwareID' when calling modifyAntiMalware");
      }

      // verify the required parameter 'antiMalwareConfiguration' is set
      if (antiMalwareConfiguration === undefined || antiMalwareConfiguration === null) {
        throw new Error("Missing the required parameter 'antiMalwareConfiguration' when calling modifyAntiMalware");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyAntiMalware");
      }


      var pathParams = {
        'antiMalwareID': antiMalwareID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AntiMalwareConfiguration;

      return this.apiClient.callApi(
        '/antimalwareconfigurations/{antiMalwareID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Anti-Malware Configuration
     * Modify an anti-malware configuration by ID. Any unset elements will be left unchanged.
     * @param {Number} antiMalwareID The ID number of the anti-malware configuration to modify.
     * @param {module:model/AntiMalwareConfiguration} antiMalwareConfiguration The settings of the anti-malware configuration to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AntiMalwareConfiguration}
     */
    this.modifyAntiMalware = function(antiMalwareID, antiMalwareConfiguration, apiVersion) {
      return this.modifyAntiMalwareWithHttpInfo(antiMalwareID, antiMalwareConfiguration, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Anti-Malware Configurations
     * Search for anti-malware configurations using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AntiMalwareConfigurations} and HTTP response
     */
    this.searchAntiMalwaresWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchAntiMalwares");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AntiMalwareConfigurations;

      return this.apiClient.callApi(
        '/antimalwareconfigurations/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Anti-Malware Configurations
     * Search for anti-malware configurations using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AntiMalwareConfigurations}
     */
    this.searchAntiMalwares = function(apiVersion, opts) {
      return this.searchAntiMalwaresWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
