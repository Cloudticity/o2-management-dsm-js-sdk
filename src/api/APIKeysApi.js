/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiKey', 'model/ApiKeys', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiKey'), require('../model/ApiKeys'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.APIKeysApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ApiKey, root.Deepsecurity.ApiKeys, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, ApiKey, ApiKeys, SearchFilter) {
  'use strict';

  /**
   * APIKeys service.
   * @module api/APIKeysApi
   * @version 12.0.446
   */

  /**
   * Constructs a new APIKeysApi. 
   * @alias module:api/APIKeysApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an API Key
     * Create a new API key.
     * @param {module:model/ApiKey} apiKey The settings of the new API key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.createApiKeyWithHttpInfo = function(apiKey, apiVersion) {
      var postBody = apiKey;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createApiKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createApiKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apikeys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an API Key
     * Create a new API key.
     * @param {module:model/ApiKey} apiKey The settings of the new API key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.createApiKey = function(apiKey, apiVersion) {
      return this.createApiKeyWithHttpInfo(apiKey, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an API Key
     * Delete an API key by ID.
     * @param {Number} apiKeyID The ID number of the API key to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteApiKeyWithHttpInfo = function(apiKeyID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID === undefined || apiKeyID === null) {
        throw new Error("Missing the required parameter 'apiKeyID' when calling deleteApiKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteApiKey");
      }


      var pathParams = {
        'apiKeyID': apiKeyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/apikeys/{apiKeyID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an API Key
     * Delete an API key by ID.
     * @param {Number} apiKeyID The ID number of the API key to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteApiKey = function(apiKeyID, apiVersion) {
      return this.deleteApiKeyWithHttpInfo(apiKeyID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an API Key
     * Describe an API key by ID.
     * @param {Number} apiKeyID The ID number of the API key to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.describeApiKeyWithHttpInfo = function(apiKeyID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID === undefined || apiKeyID === null) {
        throw new Error("Missing the required parameter 'apiKeyID' when calling describeApiKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeApiKey");
      }


      var pathParams = {
        'apiKeyID': apiKeyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apikeys/{apiKeyID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an API Key
     * Describe an API key by ID.
     * @param {Number} apiKeyID The ID number of the API key to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.describeApiKey = function(apiKeyID, apiVersion) {
      return this.describeApiKeyWithHttpInfo(apiKeyID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe the Current API Key
     * Describe the current API key. Authentication must be done via an API secret key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.describeCurrentApiKeyWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeCurrentApiKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apikeys/current', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe the Current API Key
     * Describe the current API key. Authentication must be done via an API secret key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.describeCurrentApiKey = function(apiVersion) {
      return this.describeCurrentApiKeyWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List API Keys
     * Lists all API keys.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKeys} and HTTP response
     */
    this.listApiKeysWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listApiKeys");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKeys;

      return this.apiClient.callApi(
        '/apikeys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List API Keys
     * Lists all API keys.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKeys}
     */
    this.listApiKeys = function(apiVersion) {
      return this.listApiKeysWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an API Key
     * Modify an API key by ID. Any unset elements will be left unchanged.
     * @param {Number} apiKeyID The ID number of the API key to modify.
     * @param {module:model/ApiKey} apiKey The settings of the API key to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.modifyApiKeyWithHttpInfo = function(apiKeyID, apiKey, apiVersion) {
      var postBody = apiKey;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID === undefined || apiKeyID === null) {
        throw new Error("Missing the required parameter 'apiKeyID' when calling modifyApiKey");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling modifyApiKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyApiKey");
      }


      var pathParams = {
        'apiKeyID': apiKeyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apikeys/{apiKeyID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an API Key
     * Modify an API key by ID. Any unset elements will be left unchanged.
     * @param {Number} apiKeyID The ID number of the API key to modify.
     * @param {module:model/ApiKey} apiKey The settings of the API key to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.modifyApiKey = function(apiKeyID, apiKey, apiVersion) {
      return this.modifyApiKeyWithHttpInfo(apiKeyID, apiKey, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate an API Secret Key
     * Generate a new API secret key.
     * @param {Number} apiKeyID The ID number of API key used to generate the secret key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.replaceApiSecretKeyWithHttpInfo = function(apiKeyID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID === undefined || apiKeyID === null) {
        throw new Error("Missing the required parameter 'apiKeyID' when calling replaceApiSecretKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replaceApiSecretKey");
      }


      var pathParams = {
        'apiKeyID': apiKeyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apikeys/{apiKeyID}/secretkey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate an API Secret Key
     * Generate a new API secret key.
     * @param {Number} apiKeyID The ID number of API key used to generate the secret key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.replaceApiSecretKey = function(apiKeyID, apiVersion) {
      return this.replaceApiSecretKeyWithHttpInfo(apiKeyID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search API Keys
     * Search for API keys using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKeys} and HTTP response
     */
    this.searchApiKeysWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchApiKeys");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKeys;

      return this.apiClient.callApi(
        '/apikeys/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search API Keys
     * Search for API keys using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKeys}
     */
    this.searchApiKeys = function(apiVersion, opts) {
      return this.searchApiKeysWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
