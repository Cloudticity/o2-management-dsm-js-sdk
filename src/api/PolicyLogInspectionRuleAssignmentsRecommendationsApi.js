/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LogInspectionAssignments', 'model/RuleIDs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LogInspectionAssignments'), require('../model/RuleIDs'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.PolicyLogInspectionRuleAssignmentsRecommendationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.LogInspectionAssignments, root.Deepsecurity.RuleIDs);
  }
}(this, function(ApiClient, LogInspectionAssignments, RuleIDs) {
  'use strict';

  /**
   * PolicyLogInspectionRuleAssignmentsRecommendations service.
   * @module api/PolicyLogInspectionRuleAssignmentsRecommendationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new PolicyLogInspectionRuleAssignmentsRecommendationsApi. 
   * @alias module:api/PolicyLogInspectionRuleAssignmentsRecommendationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Log Inspection Rule IDs
     * Assign log inspection rule IDs to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.logInspectionRuleIDs The ID numbers of the log inspection rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionAssignments} and HTTP response
     */
    this.addLogInspectionRuleIDsToPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['logInspectionRuleIDs'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling addLogInspectionRuleIDsToPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addLogInspectionRuleIDsToPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add Log Inspection Rule IDs
     * Assign log inspection rule IDs to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.logInspectionRuleIDs The ID numbers of the log inspection rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionAssignments}
     */
    this.addLogInspectionRuleIDsToPolicy = function(policyID, apiVersion, opts) {
      return this.addLogInspectionRuleIDsToPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Log Inspection Rule IDs
     * Lists all log inspection rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionAssignments} and HTTP response
     */
    this.listLogInspectionRuleIDsOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling listLogInspectionRuleIDsOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listLogInspectionRuleIDsOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Log Inspection Rule IDs
     * Lists all log inspection rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionAssignments}
     */
    this.listLogInspectionRuleIDsOnPolicy = function(policyID, apiVersion, opts) {
      return this.listLogInspectionRuleIDsOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Log Inspection Rule ID
     * Unassign a log inspection rule ID from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionAssignments} and HTTP response
     */
    this.removeLogInspectionRuleIDFromPolicyWithHttpInfo = function(policyID, logInspectionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling removeLogInspectionRuleIDFromPolicy");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling removeLogInspectionRuleIDFromPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeLogInspectionRuleIDFromPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/assignments/{logInspectionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Log Inspection Rule ID
     * Unassign a log inspection rule ID from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionAssignments}
     */
    this.removeLogInspectionRuleIDFromPolicy = function(policyID, logInspectionRuleID, apiVersion, opts) {
      return this.removeLogInspectionRuleIDFromPolicyWithHttpInfo(policyID, logInspectionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Log Inspection Rule IDs
     * Set log inspection rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.logInspectionRuleIDs The ID numbers of the log inspection rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionAssignments} and HTTP response
     */
    this.setLogInspectionRuleIDsOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['logInspectionRuleIDs'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling setLogInspectionRuleIDsOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setLogInspectionRuleIDsOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/assignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set Log Inspection Rule IDs
     * Set log inspection rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.logInspectionRuleIDs The ID numbers of the log inspection rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionAssignments}
     */
    this.setLogInspectionRuleIDsOnPolicy = function(policyID, apiVersion, opts) {
      return this.setLogInspectionRuleIDsOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
