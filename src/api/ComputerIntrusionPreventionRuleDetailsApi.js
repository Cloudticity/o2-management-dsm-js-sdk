/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntrusionPreventionRule', 'model/IntrusionPreventionRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntrusionPreventionRule'), require('../model/IntrusionPreventionRules'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerIntrusionPreventionRuleDetailsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntrusionPreventionRule, root.Deepsecurity.IntrusionPreventionRules);
  }
}(this, function(ApiClient, IntrusionPreventionRule, IntrusionPreventionRules) {
  'use strict';

  /**
   * ComputerIntrusionPreventionRuleDetails service.
   * @module api/ComputerIntrusionPreventionRuleDetailsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerIntrusionPreventionRuleDetailsApi. 
   * @alias module:api/ComputerIntrusionPreventionRuleDetailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe an intrusion prevention rule
     * Describe an intrusion prevention rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.describeIntrusionPreventionRuleOnComputerWithHttpInfo = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling describeIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling describeIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeIntrusionPreventionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/rules/{intrusionPreventionRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an intrusion prevention rule
     * Describe an intrusion prevention rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.describeIntrusionPreventionRuleOnComputer = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      return this.describeIntrusionPreventionRuleOnComputerWithHttpInfo(computerID, intrusionPreventionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List intrusion prevention rules
     * Lists all intrusion prevention rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRules} and HTTP response
     */
    this.listIntrusionPreventionRulesOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listIntrusionPreventionRulesOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntrusionPreventionRulesOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRules;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List intrusion prevention rules
     * Lists all intrusion prevention rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRules}
     */
    this.listIntrusionPreventionRulesOnComputer = function(computerID, apiVersion, opts) {
      return this.listIntrusionPreventionRulesOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an intrusion prevention rule
     * Modify an intrusion prevention rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to modify.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the intrusion prevention rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.modifyIntrusionPreventionRuleOnComputerWithHttpInfo = function(computerID, intrusionPreventionRuleID, intrusionPreventionRule, apiVersion, opts) {
      opts = opts || {};
      var postBody = intrusionPreventionRule;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling modifyIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling modifyIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'intrusionPreventionRule' is set
      if (intrusionPreventionRule === undefined || intrusionPreventionRule === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRule' when calling modifyIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyIntrusionPreventionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/rules/{intrusionPreventionRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an intrusion prevention rule
     * Modify an intrusion prevention rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to modify.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the intrusion prevention rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.modifyIntrusionPreventionRuleOnComputer = function(computerID, intrusionPreventionRuleID, intrusionPreventionRule, apiVersion, opts) {
      return this.modifyIntrusionPreventionRuleOnComputerWithHttpInfo(computerID, intrusionPreventionRuleID, intrusionPreventionRule, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset intrusion prevention rule overrides
     * Remove all overrides for an intrusion prevention rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.resetIntrusionPreventionRuleOnComputerWithHttpInfo = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling resetIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling resetIntrusionPreventionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resetIntrusionPreventionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/rules/{intrusionPreventionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset intrusion prevention rule overrides
     * Remove all overrides for an intrusion prevention rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.resetIntrusionPreventionRuleOnComputer = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      return this.resetIntrusionPreventionRuleOnComputerWithHttpInfo(computerID, intrusionPreventionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
