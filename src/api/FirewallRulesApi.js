/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FirewallRule', 'model/FirewallRules', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FirewallRule'), require('../model/FirewallRules'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.FirewallRulesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.FirewallRule, root.Deepsecurity.FirewallRules, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, FirewallRule, FirewallRules, SearchFilter) {
  'use strict';

  /**
   * FirewallRules service.
   * @module api/FirewallRulesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new FirewallRulesApi. 
   * @alias module:api/FirewallRulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Firewall Rule
     * Create a new firewall rule.
     * @param {module:model/FirewallRule} firewallRule The settings of the new firewall rule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.createFirewallRuleWithHttpInfo = function(firewallRule, apiVersion) {
      var postBody = firewallRule;

      // verify the required parameter 'firewallRule' is set
      if (firewallRule === undefined || firewallRule === null) {
        throw new Error("Missing the required parameter 'firewallRule' when calling createFirewallRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createFirewallRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/firewallrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Firewall Rule
     * Create a new firewall rule.
     * @param {module:model/FirewallRule} firewallRule The settings of the new firewall rule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.createFirewallRule = function(firewallRule, apiVersion) {
      return this.createFirewallRuleWithHttpInfo(firewallRule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Firewall Rule
     * Delete a firewall rule by ID.
     * @param {Number} firewallRuleID The ID number of the firewall rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFirewallRuleWithHttpInfo = function(firewallRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling deleteFirewallRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteFirewallRule");
      }


      var pathParams = {
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/firewallrules/{firewallRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Firewall Rule
     * Delete a firewall rule by ID.
     * @param {Number} firewallRuleID The ID number of the firewall rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFirewallRule = function(firewallRuleID, apiVersion) {
      return this.deleteFirewallRuleWithHttpInfo(firewallRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Firewall Rule
     * Describe a firewall rule by ID.
     * @param {Number} firewallRuleID The ID number of the firewall rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.describeFirewallRuleWithHttpInfo = function(firewallRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling describeFirewallRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeFirewallRule");
      }


      var pathParams = {
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/firewallrules/{firewallRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Firewall Rule
     * Describe a firewall rule by ID.
     * @param {Number} firewallRuleID The ID number of the firewall rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.describeFirewallRule = function(firewallRuleID, apiVersion) {
      return this.describeFirewallRuleWithHttpInfo(firewallRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Firewall Rules
     * Lists all firewall rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRules} and HTTP response
     */
    this.listFirewallRulesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listFirewallRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRules;

      return this.apiClient.callApi(
        '/firewallrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Firewall Rules
     * Lists all firewall rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRules}
     */
    this.listFirewallRules = function(apiVersion) {
      return this.listFirewallRulesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Firewall Rule
     * Modify a firewall rule by ID. Any unset elements will be left unchanged.
     * @param {Number} firewallRuleID The ID number of the firewall rule to modify.
     * @param {module:model/FirewallRule} firewallRules The settings of the firewall rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.modifyFirewallRuleWithHttpInfo = function(firewallRuleID, firewallRules, apiVersion) {
      var postBody = firewallRules;

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling modifyFirewallRule");
      }

      // verify the required parameter 'firewallRules' is set
      if (firewallRules === undefined || firewallRules === null) {
        throw new Error("Missing the required parameter 'firewallRules' when calling modifyFirewallRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyFirewallRule");
      }


      var pathParams = {
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/firewallrules/{firewallRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Firewall Rule
     * Modify a firewall rule by ID. Any unset elements will be left unchanged.
     * @param {Number} firewallRuleID The ID number of the firewall rule to modify.
     * @param {module:model/FirewallRule} firewallRules The settings of the firewall rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.modifyFirewallRule = function(firewallRuleID, firewallRules, apiVersion) {
      return this.modifyFirewallRuleWithHttpInfo(firewallRuleID, firewallRules, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Firewall Rules
     * Search for firewall rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRules} and HTTP response
     */
    this.searchFirewallRulesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchFirewallRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRules;

      return this.apiClient.callApi(
        '/firewallrules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Firewall Rules
     * Search for firewall rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRules}
     */
    this.searchFirewallRules = function(apiVersion, opts) {
      return this.searchFirewallRulesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
