/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LogInspectionRule', 'model/LogInspectionRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LogInspectionRule'), require('../model/LogInspectionRules'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.PolicyLogInspectionRuleDetailsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.LogInspectionRule, root.Deepsecurity.LogInspectionRules);
  }
}(this, function(ApiClient, LogInspectionRule, LogInspectionRules) {
  'use strict';

  /**
   * PolicyLogInspectionRuleDetails service.
   * @module api/PolicyLogInspectionRuleDetailsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new PolicyLogInspectionRuleDetailsApi. 
   * @alias module:api/PolicyLogInspectionRuleDetailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe an log inspection rule
     * Describe an log inspection rule including policy-level overrides.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.describeLogInspectionRuleOnPolicyWithHttpInfo = function(policyID, logInspectionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling describeLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling describeLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeLogInspectionRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/rules/{logInspectionRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an log inspection rule
     * Describe an log inspection rule including policy-level overrides.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.describeLogInspectionRuleOnPolicy = function(policyID, logInspectionRuleID, apiVersion, opts) {
      return this.describeLogInspectionRuleOnPolicyWithHttpInfo(policyID, logInspectionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List log inspection rules
     * Lists all log inspection rules assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRules} and HTTP response
     */
    this.listLogInspectionRulesOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling listLogInspectionRulesOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listLogInspectionRulesOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRules;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List log inspection rules
     * Lists all log inspection rules assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRules}
     */
    this.listLogInspectionRulesOnPolicy = function(policyID, apiVersion, opts) {
      return this.listLogInspectionRulesOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an log inspection rule
     * Modify an log inspection rule assigned to a policy. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to modify.
     * @param {module:model/LogInspectionRule} logInspectionRule The settings of the log inspection rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.modifyLogInspectionRuleOnPolicyWithHttpInfo = function(policyID, logInspectionRuleID, logInspectionRule, apiVersion, opts) {
      opts = opts || {};
      var postBody = logInspectionRule;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling modifyLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling modifyLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'logInspectionRule' is set
      if (logInspectionRule === undefined || logInspectionRule === null) {
        throw new Error("Missing the required parameter 'logInspectionRule' when calling modifyLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyLogInspectionRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/rules/{logInspectionRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an log inspection rule
     * Modify an log inspection rule assigned to a policy. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to modify.
     * @param {module:model/LogInspectionRule} logInspectionRule The settings of the log inspection rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.modifyLogInspectionRuleOnPolicy = function(policyID, logInspectionRuleID, logInspectionRule, apiVersion, opts) {
      return this.modifyLogInspectionRuleOnPolicyWithHttpInfo(policyID, logInspectionRuleID, logInspectionRule, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset log inspection rule overrides
     * Remove all overrides for an log inspection rule from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.resetLogInspectionRuleOnPolicyWithHttpInfo = function(policyID, logInspectionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling resetLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling resetLogInspectionRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resetLogInspectionRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/loginspection/rules/{logInspectionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset log inspection rule overrides
     * Remove all overrides for an log inspection rule from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.resetLogInspectionRuleOnPolicy = function(policyID, logInspectionRuleID, apiVersion, opts) {
      return this.resetLogInspectionRuleOnPolicyWithHttpInfo(policyID, logInspectionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
