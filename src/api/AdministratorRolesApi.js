/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdministratorRoles', 'model/Role', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdministratorRoles'), require('../model/Role'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.AdministratorRolesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.AdministratorRoles, root.Deepsecurity.Role, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, AdministratorRoles, Role, SearchFilter) {
  'use strict';

  /**
   * AdministratorRoles service.
   * @module api/AdministratorRolesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new AdministratorRolesApi. 
   * @alias module:api/AdministratorRolesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Administrator Role
     * Create a new administrator role.
     * @param {module:model/Role} administratorrole The settings of the new administrator role.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    this.createAdministratorRoleWithHttpInfo = function(administratorrole, apiVersion) {
      var postBody = administratorrole;

      // verify the required parameter 'administratorrole' is set
      if (administratorrole === undefined || administratorrole === null) {
        throw new Error("Missing the required parameter 'administratorrole' when calling createAdministratorRole");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createAdministratorRole");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Administrator Role
     * Create a new administrator role.
     * @param {module:model/Role} administratorrole The settings of the new administrator role.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    this.createAdministratorRole = function(administratorrole, apiVersion) {
      return this.createAdministratorRoleWithHttpInfo(administratorrole, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Administrator Role
     * Delete an administrator role by ID.
     * @param {Number} roleID The ID nunmber of the administrator role to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAdministratorRoleWithHttpInfo = function(roleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'roleID' is set
      if (roleID === undefined || roleID === null) {
        throw new Error("Missing the required parameter 'roleID' when calling deleteAdministratorRole");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteAdministratorRole");
      }


      var pathParams = {
        'roleID': roleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/roles/{roleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Administrator Role
     * Delete an administrator role by ID.
     * @param {Number} roleID The ID nunmber of the administrator role to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAdministratorRole = function(roleID, apiVersion) {
      return this.deleteAdministratorRoleWithHttpInfo(roleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Administrator Role
     * Describe an administrator role by ID.
     * @param {Number} roleID The ID number of the administrator role to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    this.describeAdministratorRoleWithHttpInfo = function(roleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'roleID' is set
      if (roleID === undefined || roleID === null) {
        throw new Error("Missing the required parameter 'roleID' when calling describeAdministratorRole");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeAdministratorRole");
      }


      var pathParams = {
        'roleID': roleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles/{roleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Administrator Role
     * Describe an administrator role by ID.
     * @param {Number} roleID The ID number of the administrator role to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    this.describeAdministratorRole = function(roleID, apiVersion) {
      return this.describeAdministratorRoleWithHttpInfo(roleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Administrator Roles
     * Lists all administrator roles.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdministratorRoles} and HTTP response
     */
    this.listAdministratorRolesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listAdministratorRoles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdministratorRoles;

      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Administrator Roles
     * Lists all administrator roles.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdministratorRoles}
     */
    this.listAdministratorRoles = function(apiVersion) {
      return this.listAdministratorRolesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Administrator Role
     * Modify an administrator role by ID. Any properties that have no value are not modified.
     * @param {Number} roleID The ID number of the administrator role to modify.
     * @param {module:model/Role} administrator The settings of the administrator role to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    this.modifyAdministratorRoleWithHttpInfo = function(roleID, administrator, apiVersion) {
      var postBody = administrator;

      // verify the required parameter 'roleID' is set
      if (roleID === undefined || roleID === null) {
        throw new Error("Missing the required parameter 'roleID' when calling modifyAdministratorRole");
      }

      // verify the required parameter 'administrator' is set
      if (administrator === undefined || administrator === null) {
        throw new Error("Missing the required parameter 'administrator' when calling modifyAdministratorRole");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyAdministratorRole");
      }


      var pathParams = {
        'roleID': roleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/roles/{roleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Administrator Role
     * Modify an administrator role by ID. Any properties that have no value are not modified.
     * @param {Number} roleID The ID number of the administrator role to modify.
     * @param {module:model/Role} administrator The settings of the administrator role to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    this.modifyAdministratorRole = function(roleID, administrator, apiVersion) {
      return this.modifyAdministratorRoleWithHttpInfo(roleID, administrator, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Administrator Roles
     * Search for administrator roles using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdministratorRoles} and HTTP response
     */
    this.searchAdministratorRolesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchAdministratorRoles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdministratorRoles;

      return this.apiClient.callApi(
        '/roles/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Administrator Roles
     * Search for administrator roles using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdministratorRoles}
     */
    this.searchAdministratorRoles = function(apiVersion, opts) {
      return this.searchAdministratorRolesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
