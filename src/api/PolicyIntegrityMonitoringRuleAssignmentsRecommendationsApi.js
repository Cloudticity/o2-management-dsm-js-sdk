/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntegrityMonitoringAssignments', 'model/RuleIDs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntegrityMonitoringAssignments'), require('../model/RuleIDs'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.PolicyIntegrityMonitoringRuleAssignmentsRecommendationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntegrityMonitoringAssignments, root.Deepsecurity.RuleIDs);
  }
}(this, function(ApiClient, IntegrityMonitoringAssignments, RuleIDs) {
  'use strict';

  /**
   * PolicyIntegrityMonitoringRuleAssignmentsRecommendations service.
   * @module api/PolicyIntegrityMonitoringRuleAssignmentsRecommendationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new PolicyIntegrityMonitoringRuleAssignmentsRecommendationsApi. 
   * @alias module:api/PolicyIntegrityMonitoringRuleAssignmentsRecommendationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Integrity Monitoring Rule IDs
     * Assign integrity monitoring rule IDs to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.addIntegrityMonitoringRuleIDsToPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['integrityMonitoringRuleIDs'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling addIntegrityMonitoringRuleIDsToPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addIntegrityMonitoringRuleIDsToPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/integritymonitoring/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add Integrity Monitoring Rule IDs
     * Assign integrity monitoring rule IDs to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.addIntegrityMonitoringRuleIDsToPolicy = function(policyID, apiVersion, opts) {
      return this.addIntegrityMonitoringRuleIDsToPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Integrity Monitoring Rule IDs
     * Lists all integrity monitoring rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.listIntegrityMonitoringRuleIDsOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling listIntegrityMonitoringRuleIDsOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntegrityMonitoringRuleIDsOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/integritymonitoring/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Integrity Monitoring Rule IDs
     * Lists all integrity monitoring rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.listIntegrityMonitoringRuleIDsOnPolicy = function(policyID, apiVersion, opts) {
      return this.listIntegrityMonitoringRuleIDsOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Integrity Monitoring Rule ID
     * Unassign an integrity monitoring rule ID from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.removeIntegrityMonitoringRuleIDFromPolicyWithHttpInfo = function(policyID, integrityMonitoringRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling removeIntegrityMonitoringRuleIDFromPolicy");
      }

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling removeIntegrityMonitoringRuleIDFromPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeIntegrityMonitoringRuleIDFromPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/integritymonitoring/assignments/{integrityMonitoringRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an Integrity Monitoring Rule ID
     * Unassign an integrity monitoring rule ID from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.removeIntegrityMonitoringRuleIDFromPolicy = function(policyID, integrityMonitoringRuleID, apiVersion, opts) {
      return this.removeIntegrityMonitoringRuleIDFromPolicyWithHttpInfo(policyID, integrityMonitoringRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Integrity Monitoring Rule IDs
     * Set integrity monitoring rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.setIntegrityMonitoringRuleIDsOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['integrityMonitoringRuleIDs'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling setIntegrityMonitoringRuleIDsOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setIntegrityMonitoringRuleIDsOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/policies/{policyID}/integritymonitoring/assignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set Integrity Monitoring Rule IDs
     * Set integrity monitoring rule IDs assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.setIntegrityMonitoringRuleIDsOnPolicy = function(policyID, apiVersion, opts) {
      return this.setIntegrityMonitoringRuleIDsOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
