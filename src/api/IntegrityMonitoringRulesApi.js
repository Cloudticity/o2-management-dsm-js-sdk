/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntegrityMonitoringRule', 'model/IntegrityMonitoringRules', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntegrityMonitoringRule'), require('../model/IntegrityMonitoringRules'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.IntegrityMonitoringRulesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntegrityMonitoringRule, root.Deepsecurity.IntegrityMonitoringRules, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, IntegrityMonitoringRule, IntegrityMonitoringRules, SearchFilter) {
  'use strict';

  /**
   * IntegrityMonitoringRules service.
   * @module api/IntegrityMonitoringRulesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new IntegrityMonitoringRulesApi. 
   * @alias module:api/IntegrityMonitoringRulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Integrity Monitoring Rule
     * Create a new integrity monitoring rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/IntegrityMonitoringRule} opts.integrityMonitoringRule The settings of the new integrity monitoring rule.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.createIntegrityMonitoringRuleWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['integrityMonitoringRule'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createIntegrityMonitoringRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/integritymonitoringrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Integrity Monitoring Rule
     * Create a new integrity monitoring rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/IntegrityMonitoringRule} opts.integrityMonitoringRule The settings of the new integrity monitoring rule.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.createIntegrityMonitoringRule = function(apiVersion, opts) {
      return this.createIntegrityMonitoringRuleWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Integrity Monitoring Rule
     * Delete an integrity monitoring rule by ID.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIntegrityMonitoringRuleWithHttpInfo = function(integrityMonitoringRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling deleteIntegrityMonitoringRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteIntegrityMonitoringRule");
      }


      var pathParams = {
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/integritymonitoringrules/{integrityMonitoringRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Integrity Monitoring Rule
     * Delete an integrity monitoring rule by ID.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIntegrityMonitoringRule = function(integrityMonitoringRuleID, apiVersion) {
      return this.deleteIntegrityMonitoringRuleWithHttpInfo(integrityMonitoringRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Integrity Monitoring Rule
     * Describe an integrity monitoring rule by ID.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.describeIntegrityMonitoringRuleWithHttpInfo = function(integrityMonitoringRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling describeIntegrityMonitoringRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeIntegrityMonitoringRule");
      }


      var pathParams = {
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/integritymonitoringrules/{integrityMonitoringRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Integrity Monitoring Rule
     * Describe an integrity monitoring rule by ID.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.describeIntegrityMonitoringRule = function(integrityMonitoringRuleID, apiVersion) {
      return this.describeIntegrityMonitoringRuleWithHttpInfo(integrityMonitoringRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Integrity Monitoring Rules
     * Lists all integrity monitoring rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRules} and HTTP response
     */
    this.listIntegrityMonitoringRulesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntegrityMonitoringRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRules;

      return this.apiClient.callApi(
        '/integritymonitoringrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Integrity Monitoring Rules
     * Lists all integrity monitoring rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRules}
     */
    this.listIntegrityMonitoringRules = function(apiVersion) {
      return this.listIntegrityMonitoringRulesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Integrity Monitoring Rule
     * Modify an integrity monitoring rule by ID. Any unset elements will be left unchanged.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to modify.
     * @param {module:model/IntegrityMonitoringRule} integrityMonitoringRule The settings of the integrity monitoring rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.modifyIntegrityMonitoringRuleWithHttpInfo = function(integrityMonitoringRuleID, integrityMonitoringRule, apiVersion) {
      var postBody = integrityMonitoringRule;

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling modifyIntegrityMonitoringRule");
      }

      // verify the required parameter 'integrityMonitoringRule' is set
      if (integrityMonitoringRule === undefined || integrityMonitoringRule === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRule' when calling modifyIntegrityMonitoringRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyIntegrityMonitoringRule");
      }


      var pathParams = {
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/integritymonitoringrules/{integrityMonitoringRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Integrity Monitoring Rule
     * Modify an integrity monitoring rule by ID. Any unset elements will be left unchanged.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to modify.
     * @param {module:model/IntegrityMonitoringRule} integrityMonitoringRule The settings of the integrity monitoring rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.modifyIntegrityMonitoringRule = function(integrityMonitoringRuleID, integrityMonitoringRule, apiVersion) {
      return this.modifyIntegrityMonitoringRuleWithHttpInfo(integrityMonitoringRuleID, integrityMonitoringRule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Integrity Monitoring Rules
     * Search for integrity monitoring rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRules} and HTTP response
     */
    this.searchIntegrityMonitoringRulesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchIntegrityMonitoringRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRules;

      return this.apiClient.callApi(
        '/integritymonitoringrules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Integrity Monitoring Rules
     * Search for integrity monitoring rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRules}
     */
    this.searchIntegrityMonitoringRules = function(apiVersion, opts) {
      return this.searchIntegrityMonitoringRulesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
