/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ComputerGroup', 'model/ComputerGroups', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ComputerGroup'), require('../model/ComputerGroups'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerGroupsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ComputerGroup, root.Deepsecurity.ComputerGroups, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, ComputerGroup, ComputerGroups, SearchFilter) {
  'use strict';

  /**
   * ComputerGroups service.
   * @module api/ComputerGroupsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerGroupsApi. 
   * @alias module:api/ComputerGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Computer Group
     * Create a new computer group.
     * @param {module:model/ComputerGroup} computerGroup The settings of the new computer group.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ComputerGroup} and HTTP response
     */
    this.createComputerGroupWithHttpInfo = function(computerGroup, apiVersion) {
      var postBody = computerGroup;

      // verify the required parameter 'computerGroup' is set
      if (computerGroup === undefined || computerGroup === null) {
        throw new Error("Missing the required parameter 'computerGroup' when calling createComputerGroup");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createComputerGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComputerGroup;

      return this.apiClient.callApi(
        '/computergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Computer Group
     * Create a new computer group.
     * @param {module:model/ComputerGroup} computerGroup The settings of the new computer group.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ComputerGroup}
     */
    this.createComputerGroup = function(computerGroup, apiVersion) {
      return this.createComputerGroupWithHttpInfo(computerGroup, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Computer Group
     * Delete a computer group by ID.
     * @param {Number} computerGroupID The ID number of the computer group to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteComputerGroupWithHttpInfo = function(computerGroupID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'computerGroupID' is set
      if (computerGroupID === undefined || computerGroupID === null) {
        throw new Error("Missing the required parameter 'computerGroupID' when calling deleteComputerGroup");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteComputerGroup");
      }


      var pathParams = {
        'computerGroupID': computerGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/computergroups/{computerGroupID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Computer Group
     * Delete a computer group by ID.
     * @param {Number} computerGroupID The ID number of the computer group to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteComputerGroup = function(computerGroupID, apiVersion) {
      return this.deleteComputerGroupWithHttpInfo(computerGroupID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Computer Group
     * Describe a computer group by ID.
     * @param {Number} computerGroupID The ID number of the computer group to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ComputerGroup} and HTTP response
     */
    this.describeComputerGroupWithHttpInfo = function(computerGroupID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'computerGroupID' is set
      if (computerGroupID === undefined || computerGroupID === null) {
        throw new Error("Missing the required parameter 'computerGroupID' when calling describeComputerGroup");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeComputerGroup");
      }


      var pathParams = {
        'computerGroupID': computerGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComputerGroup;

      return this.apiClient.callApi(
        '/computergroups/{computerGroupID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Computer Group
     * Describe a computer group by ID.
     * @param {Number} computerGroupID The ID number of the computer group to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ComputerGroup}
     */
    this.describeComputerGroup = function(computerGroupID, apiVersion) {
      return this.describeComputerGroupWithHttpInfo(computerGroupID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Computer Groups
     * Lists all computer groups.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ComputerGroups} and HTTP response
     */
    this.listComputerGroupsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listComputerGroups");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComputerGroups;

      return this.apiClient.callApi(
        '/computergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Computer Groups
     * Lists all computer groups.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ComputerGroups}
     */
    this.listComputerGroups = function(apiVersion) {
      return this.listComputerGroupsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Computer Group
     * Modify a computer group by ID. Any unset elements will be left unchanged.
     * @param {Number} computerGroupID The ID number of the computer group to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/ComputerGroup} opts.computerGroup The settings of the computer group to modify.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ComputerGroup} and HTTP response
     */
    this.modifyComputerGroupWithHttpInfo = function(computerGroupID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['computerGroup'];

      // verify the required parameter 'computerGroupID' is set
      if (computerGroupID === undefined || computerGroupID === null) {
        throw new Error("Missing the required parameter 'computerGroupID' when calling modifyComputerGroup");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyComputerGroup");
      }


      var pathParams = {
        'computerGroupID': computerGroupID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComputerGroup;

      return this.apiClient.callApi(
        '/computergroups/{computerGroupID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Computer Group
     * Modify a computer group by ID. Any unset elements will be left unchanged.
     * @param {Number} computerGroupID The ID number of the computer group to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/ComputerGroup} opts.computerGroup The settings of the computer group to modify.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ComputerGroup}
     */
    this.modifyComputerGroup = function(computerGroupID, apiVersion, opts) {
      return this.modifyComputerGroupWithHttpInfo(computerGroupID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Computer Groups
     * Search for computer groups using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ComputerGroups} and HTTP response
     */
    this.searchComputerGroupsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchComputerGroups");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ComputerGroups;

      return this.apiClient.callApi(
        '/computergroups/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Computer Groups
     * Search for computer groups using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ComputerGroups}
     */
    this.searchComputerGroups = function(apiVersion, opts) {
      return this.searchComputerGroupsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
