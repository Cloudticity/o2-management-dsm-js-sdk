/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntegrityMonitoringRule', 'model/IntegrityMonitoringRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntegrityMonitoringRule'), require('../model/IntegrityMonitoringRules'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerIntegrityMonitoringRuleDetailsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntegrityMonitoringRule, root.Deepsecurity.IntegrityMonitoringRules);
  }
}(this, function(ApiClient, IntegrityMonitoringRule, IntegrityMonitoringRules) {
  'use strict';

  /**
   * ComputerIntegrityMonitoringRuleDetails service.
   * @module api/ComputerIntegrityMonitoringRuleDetailsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerIntegrityMonitoringRuleDetailsApi. 
   * @alias module:api/ComputerIntegrityMonitoringRuleDetailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe an integrity monitoring rule
     * Describe an integrity monitoring rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.describeIntegrityMonitoringRuleOnComputerWithHttpInfo = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling describeIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling describeIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeIntegrityMonitoringRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/rules/{integrityMonitoringRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an integrity monitoring rule
     * Describe an integrity monitoring rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.describeIntegrityMonitoringRuleOnComputer = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      return this.describeIntegrityMonitoringRuleOnComputerWithHttpInfo(computerID, integrityMonitoringRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List integrity monitoring rules
     * Lists all integrity monitoring rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRules} and HTTP response
     */
    this.listIntegrityMonitoringRulesOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listIntegrityMonitoringRulesOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntegrityMonitoringRulesOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRules;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List integrity monitoring rules
     * Lists all integrity monitoring rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRules}
     */
    this.listIntegrityMonitoringRulesOnComputer = function(computerID, apiVersion, opts) {
      return this.listIntegrityMonitoringRulesOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an integrity monitoring rule
     * Modify an integrity monitoring rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to modify.
     * @param {module:model/IntegrityMonitoringRule} integrityMonitoringRule The settings of the integrity monitoring rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.modifyIntegrityMonitoringRuleOnComputerWithHttpInfo = function(computerID, integrityMonitoringRuleID, integrityMonitoringRule, apiVersion, opts) {
      opts = opts || {};
      var postBody = integrityMonitoringRule;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling modifyIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling modifyIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'integrityMonitoringRule' is set
      if (integrityMonitoringRule === undefined || integrityMonitoringRule === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRule' when calling modifyIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyIntegrityMonitoringRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/rules/{integrityMonitoringRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an integrity monitoring rule
     * Modify an integrity monitoring rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to modify.
     * @param {module:model/IntegrityMonitoringRule} integrityMonitoringRule The settings of the integrity monitoring rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.modifyIntegrityMonitoringRuleOnComputer = function(computerID, integrityMonitoringRuleID, integrityMonitoringRule, apiVersion, opts) {
      return this.modifyIntegrityMonitoringRuleOnComputerWithHttpInfo(computerID, integrityMonitoringRuleID, integrityMonitoringRule, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset integrity monitoring rule overrides
     * Remove all overrides for an integrity monitoring rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringRule} and HTTP response
     */
    this.resetIntegrityMonitoringRuleOnComputerWithHttpInfo = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling resetIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling resetIntegrityMonitoringRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resetIntegrityMonitoringRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/rules/{integrityMonitoringRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset integrity monitoring rule overrides
     * Remove all overrides for an integrity monitoring rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringRule}
     */
    this.resetIntegrityMonitoringRuleOnComputer = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      return this.resetIntegrityMonitoringRuleOnComputerWithHttpInfo(computerID, integrityMonitoringRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
