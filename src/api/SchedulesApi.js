/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Schedule', 'model/Schedules', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Schedule'), require('../model/Schedules'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.SchedulesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.Schedule, root.Deepsecurity.Schedules, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, Schedule, Schedules, SearchFilter) {
  'use strict';

  /**
   * Schedules service.
   * @module api/SchedulesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new SchedulesApi. 
   * @alias module:api/SchedulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Schedule
     * Create a new schedule.
     * @param {module:model/Schedule} schedule The settings of the new schedule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Schedule} and HTTP response
     */
    this.createScheduleWithHttpInfo = function(schedule, apiVersion) {
      var postBody = schedule;

      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling createSchedule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createSchedule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Schedule;

      return this.apiClient.callApi(
        '/schedules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Schedule
     * Create a new schedule.
     * @param {module:model/Schedule} schedule The settings of the new schedule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Schedule}
     */
    this.createSchedule = function(schedule, apiVersion) {
      return this.createScheduleWithHttpInfo(schedule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Schedule
     * Delete a schedule by ID.
     * @param {Number} scheduleID The ID number of the schedule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteScheduleWithHttpInfo = function(scheduleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'scheduleID' is set
      if (scheduleID === undefined || scheduleID === null) {
        throw new Error("Missing the required parameter 'scheduleID' when calling deleteSchedule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSchedule");
      }


      var pathParams = {
        'scheduleID': scheduleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/schedules/{scheduleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Schedule
     * Delete a schedule by ID.
     * @param {Number} scheduleID The ID number of the schedule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSchedule = function(scheduleID, apiVersion) {
      return this.deleteScheduleWithHttpInfo(scheduleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Schedule
     * Describe a schedule by ID.
     * @param {Number} scheduleID The ID number of the schedule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Schedule} and HTTP response
     */
    this.describeScheduleWithHttpInfo = function(scheduleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'scheduleID' is set
      if (scheduleID === undefined || scheduleID === null) {
        throw new Error("Missing the required parameter 'scheduleID' when calling describeSchedule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeSchedule");
      }


      var pathParams = {
        'scheduleID': scheduleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Schedule;

      return this.apiClient.callApi(
        '/schedules/{scheduleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Schedule
     * Describe a schedule by ID.
     * @param {Number} scheduleID The ID number of the schedule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Schedule}
     */
    this.describeSchedule = function(scheduleID, apiVersion) {
      return this.describeScheduleWithHttpInfo(scheduleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Schedules
     * Lists all schedules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Schedules} and HTTP response
     */
    this.listSchedulesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listSchedules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Schedules;

      return this.apiClient.callApi(
        '/schedules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Schedules
     * Lists all schedules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Schedules}
     */
    this.listSchedules = function(apiVersion) {
      return this.listSchedulesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Schedule
     * Modify a schedule by ID. Any unset elements will be left unchanged.
     * @param {Number} scheduleID The ID number of the schedule to modify.
     * @param {module:model/Schedule} schedule The settings of the request schedule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Schedule} and HTTP response
     */
    this.modifyScheduleWithHttpInfo = function(scheduleID, schedule, apiVersion) {
      var postBody = schedule;

      // verify the required parameter 'scheduleID' is set
      if (scheduleID === undefined || scheduleID === null) {
        throw new Error("Missing the required parameter 'scheduleID' when calling modifySchedule");
      }

      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling modifySchedule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifySchedule");
      }


      var pathParams = {
        'scheduleID': scheduleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Schedule;

      return this.apiClient.callApi(
        '/schedules/{scheduleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Schedule
     * Modify a schedule by ID. Any unset elements will be left unchanged.
     * @param {Number} scheduleID The ID number of the schedule to modify.
     * @param {module:model/Schedule} schedule The settings of the request schedule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Schedule}
     */
    this.modifySchedule = function(scheduleID, schedule, apiVersion) {
      return this.modifyScheduleWithHttpInfo(scheduleID, schedule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Schedules
     * Search for schedules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Schedules} and HTTP response
     */
    this.searchSchedulesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchSchedules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Schedules;

      return this.apiClient.callApi(
        '/schedules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Schedules
     * Search for schedules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Schedules}
     */
    this.searchSchedules = function(apiVersion, opts) {
      return this.searchSchedulesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
