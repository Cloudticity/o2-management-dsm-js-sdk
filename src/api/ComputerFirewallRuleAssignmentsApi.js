/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FirewallAssignments', 'model/RuleIDs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FirewallAssignments'), require('../model/RuleIDs'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerFirewallRuleAssignmentsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.FirewallAssignments, root.Deepsecurity.RuleIDs);
  }
}(this, function(ApiClient, FirewallAssignments, RuleIDs) {
  'use strict';

  /**
   * ComputerFirewallRuleAssignments service.
   * @module api/ComputerFirewallRuleAssignmentsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerFirewallRuleAssignmentsApi. 
   * @alias module:api/ComputerFirewallRuleAssignmentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Firewall Rule IDs
     * Assign firewall rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {module:model/RuleIDs} firewallRuleIDs The ID numbers of the firewall rules to add.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallAssignments} and HTTP response
     */
    this.addFirewallRuleIDsToComputerWithHttpInfo = function(computerID, firewallRuleIDs, apiVersion, opts) {
      opts = opts || {};
      var postBody = firewallRuleIDs;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling addFirewallRuleIDsToComputer");
      }

      // verify the required parameter 'firewallRuleIDs' is set
      if (firewallRuleIDs === undefined || firewallRuleIDs === null) {
        throw new Error("Missing the required parameter 'firewallRuleIDs' when calling addFirewallRuleIDsToComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addFirewallRuleIDsToComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/firewall/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add Firewall Rule IDs
     * Assign firewall rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {module:model/RuleIDs} firewallRuleIDs The ID numbers of the firewall rules to add.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallAssignments}
     */
    this.addFirewallRuleIDsToComputer = function(computerID, firewallRuleIDs, apiVersion, opts) {
      return this.addFirewallRuleIDsToComputerWithHttpInfo(computerID, firewallRuleIDs, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Firewall Rule IDs
     * Lists all firewall rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallAssignments} and HTTP response
     */
    this.listFirewallRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listFirewallRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listFirewallRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/firewall/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Firewall Rule IDs
     * Lists all firewall rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallAssignments}
     */
    this.listFirewallRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.listFirewallRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Firewall Rule ID
     * Unassign a firewall rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} firewallRuleID The ID number of the firewall rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallAssignments} and HTTP response
     */
    this.removeFirewallRuleIDFromComputerWithHttpInfo = function(computerID, firewallRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling removeFirewallRuleIDFromComputer");
      }

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling removeFirewallRuleIDFromComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeFirewallRuleIDFromComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/firewall/assignments/{firewallRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Firewall Rule ID
     * Unassign a firewall rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} firewallRuleID The ID number of the firewall rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallAssignments}
     */
    this.removeFirewallRuleIDFromComputer = function(computerID, firewallRuleID, apiVersion, opts) {
      return this.removeFirewallRuleIDFromComputerWithHttpInfo(computerID, firewallRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Firewall Rule IDs
     * Set firewall rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.firewallRuleIDs The ID numbers of the firewall rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallAssignments} and HTTP response
     */
    this.setFirewallRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['firewallRuleIDs'];

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling setFirewallRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setFirewallRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/firewall/assignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set Firewall Rule IDs
     * Set firewall rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.firewallRuleIDs The ID numbers of the firewall rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallAssignments}
     */
    this.setFirewallRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.setFirewallRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
