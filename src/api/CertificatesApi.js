/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Certificate', 'model/Certificates'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Certificate'), require('../model/Certificates'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.CertificatesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.Certificate, root.Deepsecurity.Certificates);
  }
}(this, function(ApiClient, Certificate, Certificates) {
  'use strict';

  /**
   * Certificates service.
   * @module api/CertificatesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new CertificatesApi. 
   * @alias module:api/CertificatesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a Certificate
     * Add a certificate to Deep Security Manager.
     * @param {module:model/Certificate} certificate 
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Certificate} and HTTP response
     */
    this.addCertificateWithHttpInfo = function(certificate, apiVersion) {
      var postBody = certificate;

      // verify the required parameter 'certificate' is set
      if (certificate === undefined || certificate === null) {
        throw new Error("Missing the required parameter 'certificate' when calling addCertificate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addCertificate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificate;

      return this.apiClient.callApi(
        '/certificates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a Certificate
     * Add a certificate to Deep Security Manager.
     * @param {module:model/Certificate} certificate 
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Certificate}
     */
    this.addCertificate = function(certificate, apiVersion) {
      return this.addCertificateWithHttpInfo(certificate, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Certificate
     * Delete a certificate by ID.
     * @param {Number} certificateID The ID number of the certificate to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCertificateWithHttpInfo = function(certificateID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'certificateID' is set
      if (certificateID === undefined || certificateID === null) {
        throw new Error("Missing the required parameter 'certificateID' when calling deleteCertificate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteCertificate");
      }


      var pathParams = {
        'certificateID': certificateID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/certificates/{certificateID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Certificate
     * Delete a certificate by ID.
     * @param {Number} certificateID The ID number of the certificate to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCertificate = function(certificateID, apiVersion) {
      return this.deleteCertificateWithHttpInfo(certificateID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Certificate
     * Describe a certificate by ID.
     * @param {Number} certificateID The ID number of the certificate to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Certificate} and HTTP response
     */
    this.describeCertificateWithHttpInfo = function(certificateID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'certificateID' is set
      if (certificateID === undefined || certificateID === null) {
        throw new Error("Missing the required parameter 'certificateID' when calling describeCertificate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeCertificate");
      }


      var pathParams = {
        'certificateID': certificateID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificate;

      return this.apiClient.callApi(
        '/certificates/{certificateID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Certificate
     * Describe a certificate by ID.
     * @param {Number} certificateID The ID number of the certificate to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Certificate}
     */
    this.describeCertificate = function(certificateID, apiVersion) {
      return this.describeCertificateWithHttpInfo(certificateID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Certificates
     * List all SSL certificates.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Certificates} and HTTP response
     */
    this.listCertificatesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listCertificates");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificates;

      return this.apiClient.callApi(
        '/certificates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Certificates
     * List all SSL certificates.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Certificates}
     */
    this.listCertificates = function(apiVersion) {
      return this.listCertificatesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Certificate by URL
     * Retrieve a certificate by URL
     * @param {String} URL The URL of the certificate to describe
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Certificate} and HTTP response
     */
    this.targetCertificateWithHttpInfo = function(URL, apiVersion) {
      var postBody = null;

      // verify the required parameter 'URL' is set
      if (URL === undefined || URL === null) {
        throw new Error("Missing the required parameter 'URL' when calling targetCertificate");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling targetCertificate");
      }


      var pathParams = {
      };
      var queryParams = {
        'URL': URL,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificate;

      return this.apiClient.callApi(
        '/certificates/target', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Certificate by URL
     * Retrieve a certificate by URL
     * @param {String} URL The URL of the certificate to describe
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Certificate}
     */
    this.targetCertificate = function(URL, apiVersion) {
      return this.targetCertificateWithHttpInfo(URL, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
