/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DirectoryList', 'model/DirectoryLists', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DirectoryList'), require('../model/DirectoryLists'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.DirectoryListsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.DirectoryList, root.Deepsecurity.DirectoryLists, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, DirectoryList, DirectoryLists, SearchFilter) {
  'use strict';

  /**
   * DirectoryLists service.
   * @module api/DirectoryListsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new DirectoryListsApi. 
   * @alias module:api/DirectoryListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Directory List
     * Create a new directory list.
     * @param {module:model/DirectoryList} directoryList The settings of the new directory list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DirectoryList} and HTTP response
     */
    this.createDirectoryListWithHttpInfo = function(directoryList, apiVersion) {
      var postBody = directoryList;

      // verify the required parameter 'directoryList' is set
      if (directoryList === undefined || directoryList === null) {
        throw new Error("Missing the required parameter 'directoryList' when calling createDirectoryList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createDirectoryList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DirectoryList;

      return this.apiClient.callApi(
        '/directorylists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Directory List
     * Create a new directory list.
     * @param {module:model/DirectoryList} directoryList The settings of the new directory list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DirectoryList}
     */
    this.createDirectoryList = function(directoryList, apiVersion) {
      return this.createDirectoryListWithHttpInfo(directoryList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Directory List
     * Delete a directory list by ID.
     * @param {Number} directoryListID The ID number of the directory list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteDirectoryListWithHttpInfo = function(directoryListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'directoryListID' is set
      if (directoryListID === undefined || directoryListID === null) {
        throw new Error("Missing the required parameter 'directoryListID' when calling deleteDirectoryList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteDirectoryList");
      }


      var pathParams = {
        'directoryListID': directoryListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/directorylists/{directoryListID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Directory List
     * Delete a directory list by ID.
     * @param {Number} directoryListID The ID number of the directory list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteDirectoryList = function(directoryListID, apiVersion) {
      return this.deleteDirectoryListWithHttpInfo(directoryListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Directory List
     * Describe a directory list by ID.
     * @param {Number} directoryListID The ID number of the directory list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DirectoryList} and HTTP response
     */
    this.describeDirectoryListWithHttpInfo = function(directoryListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'directoryListID' is set
      if (directoryListID === undefined || directoryListID === null) {
        throw new Error("Missing the required parameter 'directoryListID' when calling describeDirectoryList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeDirectoryList");
      }


      var pathParams = {
        'directoryListID': directoryListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DirectoryList;

      return this.apiClient.callApi(
        '/directorylists/{directoryListID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Directory List
     * Describe a directory list by ID.
     * @param {Number} directoryListID The ID number of the directory list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DirectoryList}
     */
    this.describeDirectoryList = function(directoryListID, apiVersion) {
      return this.describeDirectoryListWithHttpInfo(directoryListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Directory Lists
     * Lists all directory lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DirectoryLists} and HTTP response
     */
    this.listDirectoryListsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listDirectoryLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DirectoryLists;

      return this.apiClient.callApi(
        '/directorylists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Directory Lists
     * Lists all directory lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DirectoryLists}
     */
    this.listDirectoryLists = function(apiVersion) {
      return this.listDirectoryListsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Directory List
     * Modify a directory list by ID. Any unset elements will be left unchanged.
     * @param {Number} directoryListID The ID number of the directory list to modify.
     * @param {module:model/DirectoryList} directoryList The settings of the directory list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DirectoryList} and HTTP response
     */
    this.modifyDirectoryListWithHttpInfo = function(directoryListID, directoryList, apiVersion) {
      var postBody = directoryList;

      // verify the required parameter 'directoryListID' is set
      if (directoryListID === undefined || directoryListID === null) {
        throw new Error("Missing the required parameter 'directoryListID' when calling modifyDirectoryList");
      }

      // verify the required parameter 'directoryList' is set
      if (directoryList === undefined || directoryList === null) {
        throw new Error("Missing the required parameter 'directoryList' when calling modifyDirectoryList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyDirectoryList");
      }


      var pathParams = {
        'directoryListID': directoryListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DirectoryList;

      return this.apiClient.callApi(
        '/directorylists/{directoryListID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Directory List
     * Modify a directory list by ID. Any unset elements will be left unchanged.
     * @param {Number} directoryListID The ID number of the directory list to modify.
     * @param {module:model/DirectoryList} directoryList The settings of the directory list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DirectoryList}
     */
    this.modifyDirectoryList = function(directoryListID, directoryList, apiVersion) {
      return this.modifyDirectoryListWithHttpInfo(directoryListID, directoryList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Directory Lists
     * Search for directory lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DirectoryLists} and HTTP response
     */
    this.searchDirectoryListsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchDirectoryLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DirectoryLists;

      return this.apiClient.callApi(
        '/directorylists/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Directory Lists
     * Search for directory lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DirectoryLists}
     */
    this.searchDirectoryLists = function(apiVersion, opts) {
      return this.searchDirectoryListsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
