/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntrusionPreventionAssignments', 'model/RuleIDs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntrusionPreventionAssignments'), require('../model/RuleIDs'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerIntrusionPreventionRuleAssignmentsRecommendationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntrusionPreventionAssignments, root.Deepsecurity.RuleIDs);
  }
}(this, function(ApiClient, IntrusionPreventionAssignments, RuleIDs) {
  'use strict';

  /**
   * ComputerIntrusionPreventionRuleAssignmentsRecommendations service.
   * @module api/ComputerIntrusionPreventionRuleAssignmentsRecommendationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerIntrusionPreventionRuleAssignmentsRecommendationsApi. 
   * @alias module:api/ComputerIntrusionPreventionRuleAssignmentsRecommendationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Intrusion Prevention Rule IDs
     * Assign intrustion prevention rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.intrusionPreventionRuleIDs The ID numbers of the intrustion prevention rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionAssignments} and HTTP response
     */
    this.addIntrusionPreventionRuleIDsToComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['intrusionPreventionRuleIDs'];

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling addIntrusionPreventionRuleIDsToComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addIntrusionPreventionRuleIDsToComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add Intrusion Prevention Rule IDs
     * Assign intrustion prevention rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.intrusionPreventionRuleIDs The ID numbers of the intrustion prevention rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionAssignments}
     */
    this.addIntrusionPreventionRuleIDsToComputer = function(computerID, apiVersion, opts) {
      return this.addIntrusionPreventionRuleIDsToComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Intrusion Prevention Rule IDs
     * Lists all intrustion prevention rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionAssignments} and HTTP response
     */
    this.listIntrusionPreventionRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listIntrusionPreventionRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntrusionPreventionRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Intrusion Prevention Rule IDs
     * Lists all intrustion prevention rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionAssignments}
     */
    this.listIntrusionPreventionRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.listIntrusionPreventionRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Intrusion Prevention Rule ID
     * Unassign an intrustion prevention rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrustion prevention rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionAssignments} and HTTP response
     */
    this.removeIntrusionPreventionRuleIDFromComputerWithHttpInfo = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling removeIntrusionPreventionRuleIDFromComputer");
      }

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling removeIntrusionPreventionRuleIDFromComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeIntrusionPreventionRuleIDFromComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/assignments/{intrusionPreventionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an Intrusion Prevention Rule ID
     * Unassign an intrustion prevention rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrustion prevention rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionAssignments}
     */
    this.removeIntrusionPreventionRuleIDFromComputer = function(computerID, intrusionPreventionRuleID, apiVersion, opts) {
      return this.removeIntrusionPreventionRuleIDFromComputerWithHttpInfo(computerID, intrusionPreventionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Intrusion Prevention Rule IDs
     * Set intrustion prevention rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.intrusionPreventionRuleIDs The ID numbers of the intrustion prevention rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionAssignments} and HTTP response
     */
    this.setIntrusionPreventionRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['intrusionPreventionRuleIDs'];

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling setIntrusionPreventionRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setIntrusionPreventionRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/intrusionprevention/assignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set Intrusion Prevention Rule IDs
     * Set intrustion prevention rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.intrusionPreventionRuleIDs The ID numbers of the intrustion prevention rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionAssignments}
     */
    this.setIntrusionPreventionRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.setIntrusionPreventionRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
