/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationControlGlobalRule', 'model/ApplicationControlGlobalRules', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationControlGlobalRule'), require('../model/ApplicationControlGlobalRules'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.GlobalRulesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ApplicationControlGlobalRule, root.Deepsecurity.ApplicationControlGlobalRules, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, ApplicationControlGlobalRule, ApplicationControlGlobalRules, SearchFilter) {
  'use strict';

  /**
   * GlobalRules service.
   * @module api/GlobalRulesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new GlobalRulesApi. 
   * @alias module:api/GlobalRulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create and add new global rules
     * Create and add global rules.
     * @param {module:model/ApplicationControlGlobalRules} globalrules The settings of the new rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlGlobalRules} and HTTP response
     */
    this.addGlobalRulesWithHttpInfo = function(globalrules, apiVersion) {
      var postBody = globalrules;

      // verify the required parameter 'globalrules' is set
      if (globalrules === undefined || globalrules === null) {
        throw new Error("Missing the required parameter 'globalrules' when calling addGlobalRules");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addGlobalRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlGlobalRules;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create and add new global rules
     * Create and add global rules.
     * @param {module:model/ApplicationControlGlobalRules} globalrules The settings of the new rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlGlobalRules}
     */
    this.addGlobalRules = function(globalrules, apiVersion) {
      return this.addGlobalRulesWithHttpInfo(globalrules, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     *  Delete a global rule
     * Delete a global rule by ID.
     * @param {Number} ruleID The ID number of the rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteGlobalRuleWithHttpInfo = function(ruleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling deleteGlobalRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteGlobalRule");
      }


      var pathParams = {
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules/{ruleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     *  Delete a global rule
     * Delete a global rule by ID.
     * @param {Number} ruleID The ID number of the rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteGlobalRule = function(ruleID, apiVersion) {
      return this.deleteGlobalRuleWithHttpInfo(ruleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a global rule
     * Describe a global rule by ID.
     * @param {Number} ruleID The ID number of the rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlGlobalRule} and HTTP response
     */
    this.describeGlobalRuleWithHttpInfo = function(ruleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling describeGlobalRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeGlobalRule");
      }


      var pathParams = {
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlGlobalRule;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules/{ruleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a global rule
     * Describe a global rule by ID.
     * @param {Number} ruleID The ID number of the rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlGlobalRule}
     */
    this.describeGlobalRule = function(ruleID, apiVersion) {
      return this.describeGlobalRuleWithHttpInfo(ruleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all global rules
     * List all global rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlGlobalRules} and HTTP response
     */
    this.listGlobalRulesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listGlobalRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlGlobalRules;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all global rules
     * List all global rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlGlobalRules}
     */
    this.listGlobalRules = function(apiVersion) {
      return this.listGlobalRulesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a global rule
     * Modify a global rule by ID. Any unset elements will be left unchanged.
     * @param {Number} ruleID The ID number of the rule to modify.
     * @param {module:model/ApplicationControlGlobalRule} globalrule The settings of the rule to be modified.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlGlobalRule} and HTTP response
     */
    this.modifyGlobalRuleWithHttpInfo = function(ruleID, globalrule, apiVersion) {
      var postBody = globalrule;

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling modifyGlobalRule");
      }

      // verify the required parameter 'globalrule' is set
      if (globalrule === undefined || globalrule === null) {
        throw new Error("Missing the required parameter 'globalrule' when calling modifyGlobalRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyGlobalRule");
      }


      var pathParams = {
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlGlobalRule;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules/{ruleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a global rule
     * Modify a global rule by ID. Any unset elements will be left unchanged.
     * @param {Number} ruleID The ID number of the rule to modify.
     * @param {module:model/ApplicationControlGlobalRule} globalrule The settings of the rule to be modified.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlGlobalRule}
     */
    this.modifyGlobalRule = function(ruleID, globalrule, apiVersion) {
      return this.modifyGlobalRuleWithHttpInfo(ruleID, globalrule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search global rules
     * Search for global rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlGlobalRules} and HTTP response
     */
    this.searchGlobalRulesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchGlobalRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlGlobalRules;

      return this.apiClient.callApi(
        '/applicationcontrolglobalrules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search global rules
     * Search for global rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlGlobalRules}
     */
    this.searchGlobalRules = function(apiVersion, opts) {
      return this.searchGlobalRulesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
