/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MacList', 'model/MacLists', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MacList'), require('../model/MacLists'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.MACListsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.MacList, root.Deepsecurity.MacLists, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, MacList, MacLists, SearchFilter) {
  'use strict';

  /**
   * MACLists service.
   * @module api/MACListsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new MACListsApi. 
   * @alias module:api/MACListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a MAC List
     * Create a new MAC list.
     * @param {module:model/MacList} macList The settings of the new MAC list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MacList} and HTTP response
     */
    this.createMACListWithHttpInfo = function(macList, apiVersion) {
      var postBody = macList;

      // verify the required parameter 'macList' is set
      if (macList === undefined || macList === null) {
        throw new Error("Missing the required parameter 'macList' when calling createMACList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createMACList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MacList;

      return this.apiClient.callApi(
        '/maclists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a MAC List
     * Create a new MAC list.
     * @param {module:model/MacList} macList The settings of the new MAC list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MacList}
     */
    this.createMACList = function(macList, apiVersion) {
      return this.createMACListWithHttpInfo(macList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a MAC List
     * Delete a MAC list by ID.
     * @param {Number} macListID The ID number of the MAC list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteMACListWithHttpInfo = function(macListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'macListID' is set
      if (macListID === undefined || macListID === null) {
        throw new Error("Missing the required parameter 'macListID' when calling deleteMACList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteMACList");
      }


      var pathParams = {
        'macListID': macListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/maclists/{macListID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a MAC List
     * Delete a MAC list by ID.
     * @param {Number} macListID The ID number of the MAC list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteMACList = function(macListID, apiVersion) {
      return this.deleteMACListWithHttpInfo(macListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a MAC List
     * Describe a MAC list by ID.
     * @param {Number} macListID The ID number of the MAC list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MacList} and HTTP response
     */
    this.describeMACListWithHttpInfo = function(macListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'macListID' is set
      if (macListID === undefined || macListID === null) {
        throw new Error("Missing the required parameter 'macListID' when calling describeMACList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeMACList");
      }


      var pathParams = {
        'macListID': macListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MacList;

      return this.apiClient.callApi(
        '/maclists/{macListID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a MAC List
     * Describe a MAC list by ID.
     * @param {Number} macListID The ID number of the MAC list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MacList}
     */
    this.describeMACList = function(macListID, apiVersion) {
      return this.describeMACListWithHttpInfo(macListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List MAC Lists
     * Lists all MAC lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MacLists} and HTTP response
     */
    this.listMACListsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listMACLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MacLists;

      return this.apiClient.callApi(
        '/maclists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List MAC Lists
     * Lists all MAC lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MacLists}
     */
    this.listMACLists = function(apiVersion) {
      return this.listMACListsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a MAC List
     * Modify a MAC list by ID. Any unset elements will be left unchanged.
     * @param {Number} macListID The ID number of the MAC list to modify.
     * @param {module:model/MacList} macList The settings of the MAC list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MacList} and HTTP response
     */
    this.modifyMACListWithHttpInfo = function(macListID, macList, apiVersion) {
      var postBody = macList;

      // verify the required parameter 'macListID' is set
      if (macListID === undefined || macListID === null) {
        throw new Error("Missing the required parameter 'macListID' when calling modifyMACList");
      }

      // verify the required parameter 'macList' is set
      if (macList === undefined || macList === null) {
        throw new Error("Missing the required parameter 'macList' when calling modifyMACList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyMACList");
      }


      var pathParams = {
        'macListID': macListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MacList;

      return this.apiClient.callApi(
        '/maclists/{macListID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a MAC List
     * Modify a MAC list by ID. Any unset elements will be left unchanged.
     * @param {Number} macListID The ID number of the MAC list to modify.
     * @param {module:model/MacList} macList The settings of the MAC list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MacList}
     */
    this.modifyMACList = function(macListID, macList, apiVersion) {
      return this.modifyMACListWithHttpInfo(macListID, macList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search MAC Lists
     * Search for MAC lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MacLists} and HTTP response
     */
    this.searchMACListsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchMACLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MacLists;

      return this.apiClient.callApi(
        '/maclists/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search MAC Lists
     * Search for MAC lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MacLists}
     */
    this.searchMACLists = function(apiVersion, opts) {
      return this.searchMACListsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
