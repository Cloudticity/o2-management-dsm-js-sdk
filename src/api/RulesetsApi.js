/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationControlRule', 'model/ApplicationControlRules', 'model/Ruleset', 'model/Rulesets', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationControlRule'), require('../model/ApplicationControlRules'), require('../model/Ruleset'), require('../model/Rulesets'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.RulesetsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ApplicationControlRule, root.Deepsecurity.ApplicationControlRules, root.Deepsecurity.Ruleset, root.Deepsecurity.Rulesets, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, ApplicationControlRule, ApplicationControlRules, Ruleset, Rulesets, SearchFilter) {
  'use strict';

  /**
   * Rulesets service.
   * @module api/RulesetsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new RulesetsApi. 
   * @alias module:api/RulesetsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Shared Ruleset
     * Create a new shared ruleset.
     * @param {module:model/Ruleset} ruleset The settings of the new ruleset.
     * @param {Number} softwareinventoryid ID of the software inventory to base the ruleset on.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.createRulesetWithHttpInfo = function(ruleset, softwareinventoryid, apiVersion) {
      var postBody = ruleset;

      // verify the required parameter 'ruleset' is set
      if (ruleset === undefined || ruleset === null) {
        throw new Error("Missing the required parameter 'ruleset' when calling createRuleset");
      }

      // verify the required parameter 'softwareinventoryid' is set
      if (softwareinventoryid === undefined || softwareinventoryid === null) {
        throw new Error("Missing the required parameter 'softwareinventoryid' when calling createRuleset");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createRuleset");
      }


      var pathParams = {
      };
      var queryParams = {
        'softwareinventoryid': softwareinventoryid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/rulesets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Shared Ruleset
     * Create a new shared ruleset.
     * @param {module:model/Ruleset} ruleset The settings of the new ruleset.
     * @param {Number} softwareinventoryid ID of the software inventory to base the ruleset on.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.createRuleset = function(ruleset, softwareinventoryid, apiVersion) {
      return this.createRulesetWithHttpInfo(ruleset, softwareinventoryid, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset
     * Delete a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRulesetWithHttpInfo = function(rulesetID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling deleteRuleset");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteRuleset");
      }


      var pathParams = {
        'rulesetID': rulesetID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Ruleset
     * Delete a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRuleset = function(rulesetID, apiVersion) {
      return this.deleteRulesetWithHttpInfo(rulesetID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset Rule
     * Delete a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRulesetRuleWithHttpInfo = function(rulesetID, ruleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling deleteRulesetRule");
      }

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling deleteRulesetRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteRulesetRule");
      }


      var pathParams = {
        'rulesetID': rulesetID,
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}/rules/{ruleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Ruleset Rule
     * Delete a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRulesetRule = function(rulesetID, ruleID, apiVersion) {
      return this.deleteRulesetRuleWithHttpInfo(rulesetID, ruleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Ruleset
     * Describe a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.describeRulesetWithHttpInfo = function(rulesetID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling describeRuleset");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeRuleset");
      }


      var pathParams = {
        'rulesetID': rulesetID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Ruleset
     * Describe a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.describeRuleset = function(rulesetID, apiVersion) {
      return this.describeRulesetWithHttpInfo(rulesetID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Ruleset Rule
     * Describe a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlRule} and HTTP response
     */
    this.describeRulesetRuleWithHttpInfo = function(rulesetID, ruleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling describeRulesetRule");
      }

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling describeRulesetRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeRulesetRule");
      }


      var pathParams = {
        'rulesetID': rulesetID,
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlRule;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}/rules/{ruleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Ruleset Rule
     * Describe a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlRule}
     */
    this.describeRulesetRule = function(rulesetID, ruleID, apiVersion) {
      return this.describeRulesetRuleWithHttpInfo(rulesetID, ruleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Ruleset Rules
     * List all rules of a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlRules} and HTTP response
     */
    this.listRulesetRulesWithHttpInfo = function(rulesetID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling listRulesetRules");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listRulesetRules");
      }


      var pathParams = {
        'rulesetID': rulesetID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlRules;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Ruleset Rules
     * List all rules of a ruleset by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlRules}
     */
    this.listRulesetRules = function(rulesetID, apiVersion) {
      return this.listRulesetRulesWithHttpInfo(rulesetID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Rulesets
     * Lists all rulesets.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rulesets} and HTTP response
     */
    this.listRulesetsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listRulesets");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rulesets;

      return this.apiClient.callApi(
        '/rulesets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Rulesets
     * Lists all rulesets.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rulesets}
     */
    this.listRulesets = function(apiVersion) {
      return this.listRulesetsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Ruleset Rule
     * Modify a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to modify.
     * @param {module:model/ApplicationControlRule} rule The settings of the rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlRule} and HTTP response
     */
    this.modifyRulesetRuleWithHttpInfo = function(rulesetID, ruleID, rule, apiVersion) {
      var postBody = rule;

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling modifyRulesetRule");
      }

      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling modifyRulesetRule");
      }

      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling modifyRulesetRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyRulesetRule");
      }


      var pathParams = {
        'rulesetID': rulesetID,
        'ruleID': ruleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlRule;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}/rules/{ruleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Ruleset Rule
     * Modify a ruleset rule by ID.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {Number} ruleID The ID number of the rule to modify.
     * @param {module:model/ApplicationControlRule} rule The settings of the rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlRule}
     */
    this.modifyRulesetRule = function(rulesetID, ruleID, rule, apiVersion) {
      return this.modifyRulesetRuleWithHttpInfo(rulesetID, ruleID, rule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Ruleset Rules
     * Search for ruleset rules using optional filters.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationControlRules} and HTTP response
     */
    this.searchRulesetRulesWithHttpInfo = function(rulesetID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'rulesetID' is set
      if (rulesetID === undefined || rulesetID === null) {
        throw new Error("Missing the required parameter 'rulesetID' when calling searchRulesetRules");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchRulesetRules");
      }


      var pathParams = {
        'rulesetID': rulesetID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationControlRules;

      return this.apiClient.callApi(
        '/rulesets/{rulesetID}/rules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Ruleset Rules
     * Search for ruleset rules using optional filters.
     * @param {Number} rulesetID The ID number of the ruleset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationControlRules}
     */
    this.searchRulesetRules = function(rulesetID, apiVersion, opts) {
      return this.searchRulesetRulesWithHttpInfo(rulesetID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Rulesets
     * Search for rulesets using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rulesets} and HTTP response
     */
    this.searchRulesetsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchRulesets");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rulesets;

      return this.apiClient.callApi(
        '/rulesets/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Rulesets
     * Search for rulesets using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rulesets}
     */
    this.searchRulesets = function(apiVersion, opts) {
      return this.searchRulesetsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
