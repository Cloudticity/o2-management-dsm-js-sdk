/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LogInspectionRule', 'model/LogInspectionRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LogInspectionRule'), require('../model/LogInspectionRules'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerLogInspectionRuleDetailsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.LogInspectionRule, root.Deepsecurity.LogInspectionRules);
  }
}(this, function(ApiClient, LogInspectionRule, LogInspectionRules) {
  'use strict';

  /**
   * ComputerLogInspectionRuleDetails service.
   * @module api/ComputerLogInspectionRuleDetailsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerLogInspectionRuleDetailsApi. 
   * @alias module:api/ComputerLogInspectionRuleDetailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe an log inspection rule
     * Describe an log inspection rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.describeLogInspectionRuleOnComputerWithHttpInfo = function(computerID, logInspectionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling describeLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling describeLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeLogInspectionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/loginspection/rules/{logInspectionRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an log inspection rule
     * Describe an log inspection rule including computer-level overrides.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.describeLogInspectionRuleOnComputer = function(computerID, logInspectionRuleID, apiVersion, opts) {
      return this.describeLogInspectionRuleOnComputerWithHttpInfo(computerID, logInspectionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List log inspection rules
     * Lists all log inspection rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRules} and HTTP response
     */
    this.listLogInspectionRulesOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listLogInspectionRulesOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listLogInspectionRulesOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRules;

      return this.apiClient.callApi(
        '/computers/{computerID}/loginspection/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List log inspection rules
     * Lists all log inspection rules assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRules}
     */
    this.listLogInspectionRulesOnComputer = function(computerID, apiVersion, opts) {
      return this.listLogInspectionRulesOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an log inspection rule
     * Modify an log inspection rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to modify.
     * @param {module:model/LogInspectionRule} logInspectionRule The settings of the log inspection rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.modifyLogInspectionRuleOnComputerWithHttpInfo = function(computerID, logInspectionRuleID, logInspectionRule, apiVersion, opts) {
      opts = opts || {};
      var postBody = logInspectionRule;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling modifyLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling modifyLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'logInspectionRule' is set
      if (logInspectionRule === undefined || logInspectionRule === null) {
        throw new Error("Missing the required parameter 'logInspectionRule' when calling modifyLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyLogInspectionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/loginspection/rules/{logInspectionRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an log inspection rule
     * Modify an log inspection rule assigned to a computer. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to modify.
     * @param {module:model/LogInspectionRule} logInspectionRule The settings of the log inspection rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.modifyLogInspectionRuleOnComputer = function(computerID, logInspectionRuleID, logInspectionRule, apiVersion, opts) {
      return this.modifyLogInspectionRuleOnComputerWithHttpInfo(computerID, logInspectionRuleID, logInspectionRule, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset log inspection rule overrides
     * Remove all overrides for an log inspection rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogInspectionRule} and HTTP response
     */
    this.resetLogInspectionRuleOnComputerWithHttpInfo = function(computerID, logInspectionRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling resetLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'logInspectionRuleID' is set
      if (logInspectionRuleID === undefined || logInspectionRuleID === null) {
        throw new Error("Missing the required parameter 'logInspectionRuleID' when calling resetLogInspectionRuleOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resetLogInspectionRuleOnComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'logInspectionRuleID': logInspectionRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogInspectionRule;

      return this.apiClient.callApi(
        '/computers/{computerID}/loginspection/rules/{logInspectionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset log inspection rule overrides
     * Remove all overrides for an log inspection rule from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} logInspectionRuleID The ID number of the log inspection rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogInspectionRule}
     */
    this.resetLogInspectionRuleOnComputer = function(computerID, logInspectionRuleID, apiVersion, opts) {
      return this.resetLogInspectionRuleOnComputerWithHttpInfo(computerID, logInspectionRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
