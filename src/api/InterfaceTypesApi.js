/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InterfaceType', 'model/InterfaceTypes', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InterfaceType'), require('../model/InterfaceTypes'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.InterfaceTypesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.InterfaceType, root.Deepsecurity.InterfaceTypes, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, InterfaceType, InterfaceTypes, SearchFilter) {
  'use strict';

  /**
   * InterfaceTypes service.
   * @module api/InterfaceTypesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new InterfaceTypesApi. 
   * @alias module:api/InterfaceTypesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Interface Type
     * Create a new interface type.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/InterfaceType} opts.interfaceTypes The settings of the new interface type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterfaceType} and HTTP response
     */
    this.createInterfaceTypeWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['interfaceTypes'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling createInterfaceType");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createInterfaceType");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InterfaceType;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Interface Type
     * Create a new interface type.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/InterfaceType} opts.interfaceTypes The settings of the new interface type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterfaceType}
     */
    this.createInterfaceType = function(policyID, apiVersion, opts) {
      return this.createInterfaceTypeWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Interface Type
     * Delete an interface type by ID.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInterfaceTypeWithHttpInfo = function(policyID, interfaceTypeID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling deleteInterfaceType");
      }

      // verify the required parameter 'interfaceTypeID' is set
      if (interfaceTypeID === undefined || interfaceTypeID === null) {
        throw new Error("Missing the required parameter 'interfaceTypeID' when calling deleteInterfaceType");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteInterfaceType");
      }


      var pathParams = {
        'policyID': policyID,
        'interfaceTypeID': interfaceTypeID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes/{interfaceTypeID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Interface Type
     * Delete an interface type by ID.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInterfaceType = function(policyID, interfaceTypeID, apiVersion) {
      return this.deleteInterfaceTypeWithHttpInfo(policyID, interfaceTypeID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Interface Type
     * Describe an interface type by ID.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterfaceType} and HTTP response
     */
    this.describeInterfaceTypeWithHttpInfo = function(policyID, interfaceTypeID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling describeInterfaceType");
      }

      // verify the required parameter 'interfaceTypeID' is set
      if (interfaceTypeID === undefined || interfaceTypeID === null) {
        throw new Error("Missing the required parameter 'interfaceTypeID' when calling describeInterfaceType");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeInterfaceType");
      }


      var pathParams = {
        'policyID': policyID,
        'interfaceTypeID': interfaceTypeID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InterfaceType;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes/{interfaceTypeID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Interface Type
     * Describe an interface type by ID.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterfaceType}
     */
    this.describeInterfaceType = function(policyID, interfaceTypeID, apiVersion) {
      return this.describeInterfaceTypeWithHttpInfo(policyID, interfaceTypeID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Interface Types
     * Lists all interface types.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterfaceTypes} and HTTP response
     */
    this.listInterfaceTypesWithHttpInfo = function(policyID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling listInterfaceTypes");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listInterfaceTypes");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InterfaceTypes;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Interface Types
     * Lists all interface types.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterfaceTypes}
     */
    this.listInterfaceTypes = function(policyID, apiVersion) {
      return this.listInterfaceTypesWithHttpInfo(policyID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Interface Type
     * Modify an interface type by ID. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to modify.
     * @param {module:model/InterfaceType} interfaceType The settings of the interface type to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterfaceType} and HTTP response
     */
    this.modifyInterfaceTypeWithHttpInfo = function(policyID, interfaceTypeID, interfaceType, apiVersion) {
      var postBody = interfaceType;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling modifyInterfaceType");
      }

      // verify the required parameter 'interfaceTypeID' is set
      if (interfaceTypeID === undefined || interfaceTypeID === null) {
        throw new Error("Missing the required parameter 'interfaceTypeID' when calling modifyInterfaceType");
      }

      // verify the required parameter 'interfaceType' is set
      if (interfaceType === undefined || interfaceType === null) {
        throw new Error("Missing the required parameter 'interfaceType' when calling modifyInterfaceType");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyInterfaceType");
      }


      var pathParams = {
        'policyID': policyID,
        'interfaceTypeID': interfaceTypeID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InterfaceType;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes/{interfaceTypeID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Interface Type
     * Modify an interface type by ID. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} interfaceTypeID The ID number of the interface type to modify.
     * @param {module:model/InterfaceType} interfaceType The settings of the interface type to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterfaceType}
     */
    this.modifyInterfaceType = function(policyID, interfaceTypeID, interfaceType, apiVersion) {
      return this.modifyInterfaceTypeWithHttpInfo(policyID, interfaceTypeID, interfaceType, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Interface Types
     * Search for interface types using optional filters.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterfaceTypes} and HTTP response
     */
    this.searchInterfaceTypesWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling searchInterfaceTypes");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchInterfaceTypes");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InterfaceTypes;

      return this.apiClient.callApi(
        '/policies/{policyID}/interfacetypes/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Interface Types
     * Search for interface types using optional filters.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterfaceTypes}
     */
    this.searchInterfaceTypes = function(policyID, apiVersion, opts) {
      return this.searchInterfaceTypesWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
