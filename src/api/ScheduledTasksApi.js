/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ScheduledTask', 'model/ScheduledTasks', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ScheduledTask'), require('../model/ScheduledTasks'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ScheduledTasksApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ScheduledTask, root.Deepsecurity.ScheduledTasks, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, ScheduledTask, ScheduledTasks, SearchFilter) {
  'use strict';

  /**
   * ScheduledTasks service.
   * @module api/ScheduledTasksApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ScheduledTasksApi. 
   * @alias module:api/ScheduledTasksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Scheduled Task
     * Create a new scheduled task.
     * @param {module:model/ScheduledTask} scheduledTask The settings of the new scheduled task.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScheduledTask} and HTTP response
     */
    this.createScheduledTaskWithHttpInfo = function(scheduledTask, apiVersion) {
      var postBody = scheduledTask;

      // verify the required parameter 'scheduledTask' is set
      if (scheduledTask === undefined || scheduledTask === null) {
        throw new Error("Missing the required parameter 'scheduledTask' when calling createScheduledTask");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createScheduledTask");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledTask;

      return this.apiClient.callApi(
        '/scheduledtasks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Scheduled Task
     * Create a new scheduled task.
     * @param {module:model/ScheduledTask} scheduledTask The settings of the new scheduled task.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScheduledTask}
     */
    this.createScheduledTask = function(scheduledTask, apiVersion) {
      return this.createScheduledTaskWithHttpInfo(scheduledTask, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Scheduled Task
     * Delete a scheduled task by ID.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteScheduledTaskWithHttpInfo = function(scheduledTaskID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'scheduledTaskID' is set
      if (scheduledTaskID === undefined || scheduledTaskID === null) {
        throw new Error("Missing the required parameter 'scheduledTaskID' when calling deleteScheduledTask");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteScheduledTask");
      }


      var pathParams = {
        'scheduledTaskID': scheduledTaskID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scheduledtasks/{scheduledTaskID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Scheduled Task
     * Delete a scheduled task by ID.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteScheduledTask = function(scheduledTaskID, apiVersion) {
      return this.deleteScheduledTaskWithHttpInfo(scheduledTaskID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Scheduled Task
     * Describe a scheduled task by ID.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScheduledTask} and HTTP response
     */
    this.describeScheduledTaskWithHttpInfo = function(scheduledTaskID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'scheduledTaskID' is set
      if (scheduledTaskID === undefined || scheduledTaskID === null) {
        throw new Error("Missing the required parameter 'scheduledTaskID' when calling describeScheduledTask");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeScheduledTask");
      }


      var pathParams = {
        'scheduledTaskID': scheduledTaskID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledTask;

      return this.apiClient.callApi(
        '/scheduledtasks/{scheduledTaskID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Scheduled Task
     * Describe a scheduled task by ID.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScheduledTask}
     */
    this.describeScheduledTask = function(scheduledTaskID, apiVersion) {
      return this.describeScheduledTaskWithHttpInfo(scheduledTaskID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Scheduled Tasks
     * Lists all scheduled tasks.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScheduledTasks} and HTTP response
     */
    this.listScheduledTasksWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listScheduledTasks");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledTasks;

      return this.apiClient.callApi(
        '/scheduledtasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Scheduled Tasks
     * Lists all scheduled tasks.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScheduledTasks}
     */
    this.listScheduledTasks = function(apiVersion) {
      return this.listScheduledTasksWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Scheduled Task
     * Modify a scheduled task by ID. Any unset elements will be left unchanged.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to modify.
     * @param {module:model/ScheduledTask} scheduledTask The settings of the scheduled task to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScheduledTask} and HTTP response
     */
    this.modifyScheduledTaskWithHttpInfo = function(scheduledTaskID, scheduledTask, apiVersion) {
      var postBody = scheduledTask;

      // verify the required parameter 'scheduledTaskID' is set
      if (scheduledTaskID === undefined || scheduledTaskID === null) {
        throw new Error("Missing the required parameter 'scheduledTaskID' when calling modifyScheduledTask");
      }

      // verify the required parameter 'scheduledTask' is set
      if (scheduledTask === undefined || scheduledTask === null) {
        throw new Error("Missing the required parameter 'scheduledTask' when calling modifyScheduledTask");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyScheduledTask");
      }


      var pathParams = {
        'scheduledTaskID': scheduledTaskID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledTask;

      return this.apiClient.callApi(
        '/scheduledtasks/{scheduledTaskID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Scheduled Task
     * Modify a scheduled task by ID. Any unset elements will be left unchanged.
     * @param {Number} scheduledTaskID The ID number of the scheduled task to modify.
     * @param {module:model/ScheduledTask} scheduledTask The settings of the scheduled task to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScheduledTask}
     */
    this.modifyScheduledTask = function(scheduledTaskID, scheduledTask, apiVersion) {
      return this.modifyScheduledTaskWithHttpInfo(scheduledTaskID, scheduledTask, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Scheduled Tasks
     * Search for scheduled tasks using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScheduledTasks} and HTTP response
     */
    this.searchScheduledTasksWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchScheduledTasks");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScheduledTasks;

      return this.apiClient.callApi(
        '/scheduledtasks/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Scheduled Tasks
     * Search for scheduled tasks using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScheduledTasks}
     */
    this.searchScheduledTasks = function(apiVersion, opts) {
      return this.searchScheduledTasksWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
