/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IpList', 'model/IpLists', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IpList'), require('../model/IpLists'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.IPListsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IpList, root.Deepsecurity.IpLists, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, IpList, IpLists, SearchFilter) {
  'use strict';

  /**
   * IPLists service.
   * @module api/IPListsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new IPListsApi. 
   * @alias module:api/IPListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an IP List
     * Create a new IP list.
     * @param {module:model/IpList} ipList The settings of the new IP list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpList} and HTTP response
     */
    this.createIPListWithHttpInfo = function(ipList, apiVersion) {
      var postBody = ipList;

      // verify the required parameter 'ipList' is set
      if (ipList === undefined || ipList === null) {
        throw new Error("Missing the required parameter 'ipList' when calling createIPList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createIPList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IpList;

      return this.apiClient.callApi(
        '/iplists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an IP List
     * Create a new IP list.
     * @param {module:model/IpList} ipList The settings of the new IP list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpList}
     */
    this.createIPList = function(ipList, apiVersion) {
      return this.createIPListWithHttpInfo(ipList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an IP List
     * Delete an IP list by ID.
     * @param {Number} ipListID The ID nunmber of the IP list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIPListWithHttpInfo = function(ipListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'ipListID' is set
      if (ipListID === undefined || ipListID === null) {
        throw new Error("Missing the required parameter 'ipListID' when calling deleteIPList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteIPList");
      }


      var pathParams = {
        'ipListID': ipListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/iplists/{ipListID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an IP List
     * Delete an IP list by ID.
     * @param {Number} ipListID The ID nunmber of the IP list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIPList = function(ipListID, apiVersion) {
      return this.deleteIPListWithHttpInfo(ipListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an IP List
     * Describe an IP list by ID.
     * @param {Number} ipListID The ID number of the IP list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpList} and HTTP response
     */
    this.describeIPListWithHttpInfo = function(ipListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'ipListID' is set
      if (ipListID === undefined || ipListID === null) {
        throw new Error("Missing the required parameter 'ipListID' when calling describeIPList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeIPList");
      }


      var pathParams = {
        'ipListID': ipListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IpList;

      return this.apiClient.callApi(
        '/iplists/{ipListID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an IP List
     * Describe an IP list by ID.
     * @param {Number} ipListID The ID number of the IP list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpList}
     */
    this.describeIPList = function(ipListID, apiVersion) {
      return this.describeIPListWithHttpInfo(ipListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List IP Lists
     * Lists all IP lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpLists} and HTTP response
     */
    this.listIPListsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIPLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IpLists;

      return this.apiClient.callApi(
        '/iplists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List IP Lists
     * Lists all IP lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpLists}
     */
    this.listIPLists = function(apiVersion) {
      return this.listIPListsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an IP List
     * Modify an IP list by ID. Any unset elements will be left unchanged.
     * @param {Number} ipListID The ID number of the IP list to modify.
     * @param {module:model/IpList} ipList The settings of the IP list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpList} and HTTP response
     */
    this.modifyIPListWithHttpInfo = function(ipListID, ipList, apiVersion) {
      var postBody = ipList;

      // verify the required parameter 'ipListID' is set
      if (ipListID === undefined || ipListID === null) {
        throw new Error("Missing the required parameter 'ipListID' when calling modifyIPList");
      }

      // verify the required parameter 'ipList' is set
      if (ipList === undefined || ipList === null) {
        throw new Error("Missing the required parameter 'ipList' when calling modifyIPList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyIPList");
      }


      var pathParams = {
        'ipListID': ipListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IpList;

      return this.apiClient.callApi(
        '/iplists/{ipListID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an IP List
     * Modify an IP list by ID. Any unset elements will be left unchanged.
     * @param {Number} ipListID The ID number of the IP list to modify.
     * @param {module:model/IpList} ipList The settings of the IP list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpList}
     */
    this.modifyIPList = function(ipListID, ipList, apiVersion) {
      return this.modifyIPListWithHttpInfo(ipListID, ipList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search IP Lists
     * Search for IP lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpLists} and HTTP response
     */
    this.searchIPListsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchIPLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IpLists;

      return this.apiClient.callApi(
        '/iplists/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search IP Lists
     * Search for IP lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpLists}
     */
    this.searchIPLists = function(apiVersion, opts) {
      return this.searchIPListsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
