/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SearchFilter', 'model/SoftwareChange', 'model/SoftwareChangeReview', 'model/SoftwareChanges'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SearchFilter'), require('../model/SoftwareChange'), require('../model/SoftwareChangeReview'), require('../model/SoftwareChanges'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.SoftwareChangesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.SearchFilter, root.Deepsecurity.SoftwareChange, root.Deepsecurity.SoftwareChangeReview, root.Deepsecurity.SoftwareChanges);
  }
}(this, function(ApiClient, SearchFilter, SoftwareChange, SoftwareChangeReview, SoftwareChanges) {
  'use strict';

  /**
   * SoftwareChanges service.
   * @module api/SoftwareChangesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new SoftwareChangesApi. 
   * @alias module:api/SoftwareChangesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe a software change
     * Describe a software change by ID.
     * @param {Number} softwareChangeID The ID number of the software change to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SoftwareChange} and HTTP response
     */
    this.describeSoftwareChangeWithHttpInfo = function(softwareChangeID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'softwareChangeID' is set
      if (softwareChangeID === undefined || softwareChangeID === null) {
        throw new Error("Missing the required parameter 'softwareChangeID' when calling describeSoftwareChange");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeSoftwareChange");
      }


      var pathParams = {
        'softwareChangeID': softwareChangeID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareChange;

      return this.apiClient.callApi(
        '/softwarechanges/{softwareChangeID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a software change
     * Describe a software change by ID.
     * @param {Number} softwareChangeID The ID number of the software change to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SoftwareChange}
     */
    this.describeSoftwareChange = function(softwareChangeID, apiVersion) {
      return this.describeSoftwareChangeWithHttpInfo(softwareChangeID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List software changes
     * Lists all software changes.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SoftwareChanges} and HTTP response
     */
    this.listSoftwareChangesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listSoftwareChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareChanges;

      return this.apiClient.callApi(
        '/softwarechanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List software changes
     * Lists all software changes.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SoftwareChanges}
     */
    this.listSoftwareChanges = function(apiVersion) {
      return this.listSoftwareChangesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Review software changes
     * Review software changes by given ID list.
     * @param {module:model/SoftwareChangeReview} softwareChangeReview The software change review settings.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SoftwareChangeReview} and HTTP response
     */
    this.reviewSoftwareChangesWithHttpInfo = function(softwareChangeReview, apiVersion) {
      var postBody = softwareChangeReview;

      // verify the required parameter 'softwareChangeReview' is set
      if (softwareChangeReview === undefined || softwareChangeReview === null) {
        throw new Error("Missing the required parameter 'softwareChangeReview' when calling reviewSoftwareChanges");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling reviewSoftwareChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareChangeReview;

      return this.apiClient.callApi(
        '/softwarechanges/review', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Review software changes
     * Review software changes by given ID list.
     * @param {module:model/SoftwareChangeReview} softwareChangeReview The software change review settings.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SoftwareChangeReview}
     */
    this.reviewSoftwareChanges = function(softwareChangeReview, apiVersion) {
      return this.reviewSoftwareChangesWithHttpInfo(softwareChangeReview, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search software changes
     * Search for software changes using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SoftwareChanges} and HTTP response
     */
    this.searchSoftwareChangesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchSoftwareChanges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SoftwareChanges;

      return this.apiClient.callApi(
        '/softwarechanges/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search software changes
     * Search for software changes using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SoftwareChanges}
     */
    this.searchSoftwareChanges = function(apiVersion, opts) {
      return this.searchSoftwareChangesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
