/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Administrator', 'model/Administrators', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Administrator'), require('../model/Administrators'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.AdministratorsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.Administrator, root.Deepsecurity.Administrators, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, Administrator, Administrators, SearchFilter) {
  'use strict';

  /**
   * Administrators service.
   * @module api/AdministratorsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new AdministratorsApi. 
   * @alias module:api/AdministratorsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Administrator
     * Create a new administrator.
     * @param {module:model/Administrator} administrator The settings of the new administrator.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Administrator} and HTTP response
     */
    this.createAdministratorWithHttpInfo = function(administrator, apiVersion) {
      var postBody = administrator;

      // verify the required parameter 'administrator' is set
      if (administrator === undefined || administrator === null) {
        throw new Error("Missing the required parameter 'administrator' when calling createAdministrator");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createAdministrator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Administrator;

      return this.apiClient.callApi(
        '/administrators', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Administrator
     * Create a new administrator.
     * @param {module:model/Administrator} administrator The settings of the new administrator.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Administrator}
     */
    this.createAdministrator = function(administrator, apiVersion) {
      return this.createAdministratorWithHttpInfo(administrator, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Administrator
     * Delete an administrator by ID.
     * @param {Number} administratorID The ID nunmber of the administrator to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAdministratorWithHttpInfo = function(administratorID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'administratorID' is set
      if (administratorID === undefined || administratorID === null) {
        throw new Error("Missing the required parameter 'administratorID' when calling deleteAdministrator");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteAdministrator");
      }


      var pathParams = {
        'administratorID': administratorID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/administrators/{administratorID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Administrator
     * Delete an administrator by ID.
     * @param {Number} administratorID The ID nunmber of the administrator to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAdministrator = function(administratorID, apiVersion) {
      return this.deleteAdministratorWithHttpInfo(administratorID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Administrator
     * Describe an administrator by ID.
     * @param {Number} administratorID The ID number of the administrator to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Administrator} and HTTP response
     */
    this.describeAdministratorWithHttpInfo = function(administratorID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'administratorID' is set
      if (administratorID === undefined || administratorID === null) {
        throw new Error("Missing the required parameter 'administratorID' when calling describeAdministrator");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeAdministrator");
      }


      var pathParams = {
        'administratorID': administratorID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Administrator;

      return this.apiClient.callApi(
        '/administrators/{administratorID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Administrator
     * Describe an administrator by ID.
     * @param {Number} administratorID The ID number of the administrator to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Administrator}
     */
    this.describeAdministrator = function(administratorID, apiVersion) {
      return this.describeAdministratorWithHttpInfo(administratorID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Administrators
     * Lists all administrators.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Administrators} and HTTP response
     */
    this.listAdministratorsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listAdministrators");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Administrators;

      return this.apiClient.callApi(
        '/administrators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Administrators
     * Lists all administrators.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Administrators}
     */
    this.listAdministrators = function(apiVersion) {
      return this.listAdministratorsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Administrator
     * Modify an administrator by ID. Any unset elements will be left unchanged.
     * @param {Number} administratorID The ID number of the administrator to modify.
     * @param {module:model/Administrator} administrator The settings of the administrator to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Administrator} and HTTP response
     */
    this.modifyAdministratorWithHttpInfo = function(administratorID, administrator, apiVersion) {
      var postBody = administrator;

      // verify the required parameter 'administratorID' is set
      if (administratorID === undefined || administratorID === null) {
        throw new Error("Missing the required parameter 'administratorID' when calling modifyAdministrator");
      }

      // verify the required parameter 'administrator' is set
      if (administrator === undefined || administrator === null) {
        throw new Error("Missing the required parameter 'administrator' when calling modifyAdministrator");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyAdministrator");
      }


      var pathParams = {
        'administratorID': administratorID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Administrator;

      return this.apiClient.callApi(
        '/administrators/{administratorID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Administrator
     * Modify an administrator by ID. Any unset elements will be left unchanged.
     * @param {Number} administratorID The ID number of the administrator to modify.
     * @param {module:model/Administrator} administrator The settings of the administrator to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Administrator}
     */
    this.modifyAdministrator = function(administratorID, administrator, apiVersion) {
      return this.modifyAdministratorWithHttpInfo(administratorID, administrator, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Administrators
     * Search for administrators using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Administrators} and HTTP response
     */
    this.searchAdministratorsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchAdministrators");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Administrators;

      return this.apiClient.callApi(
        '/administrators/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Administrators
     * Search for administrators using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Administrators}
     */
    this.searchAdministrators = function(apiVersion, opts) {
      return this.searchAdministratorsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
