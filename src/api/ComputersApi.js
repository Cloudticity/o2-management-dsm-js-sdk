/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Computer', 'model/Computers', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Computer'), require('../model/Computers'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputersApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.Computer, root.Deepsecurity.Computers, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, Computer, Computers, SearchFilter) {
  'use strict';

  /**
   * Computers service.
   * @module api/ComputersApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputersApi. 
   * @alias module:api/ComputersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Computer
     * Create a new computer.
     * @param {module:model/Computer} computer The settings of the new computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Computer} and HTTP response
     */
    this.createComputerWithHttpInfo = function(computer, apiVersion, opts) {
      opts = opts || {};
      var postBody = computer;

      // verify the required parameter 'computer' is set
      if (computer === undefined || computer === null) {
        throw new Error("Missing the required parameter 'computer' when calling createComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createComputer");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Computer;

      return this.apiClient.callApi(
        '/computers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Computer
     * Create a new computer.
     * @param {module:model/Computer} computer The settings of the new computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Computer}
     */
    this.createComputer = function(computer, apiVersion, opts) {
      return this.createComputerWithHttpInfo(computer, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Computer
     * Delete a computer by ID.
     * @param {Number} computerID The ID number of the computer to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteComputerWithHttpInfo = function(computerID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling deleteComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/computers/{computerID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Computer
     * Delete a computer by ID.
     * @param {Number} computerID The ID number of the computer to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteComputer = function(computerID, apiVersion) {
      return this.deleteComputerWithHttpInfo(computerID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Computer
     * Describe a computer by ID.
     * @param {Number} computerID The ID number of the computer to describe.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Computer} and HTTP response
     */
    this.describeComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling describeComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Computer;

      return this.apiClient.callApi(
        '/computers/{computerID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Computer
     * Describe a computer by ID.
     * @param {Number} computerID The ID number of the computer to describe.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Computer}
     */
    this.describeComputer = function(computerID, apiVersion, opts) {
      return this.describeComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Computers
     * Lists all computers.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Computers} and HTTP response
     */
    this.listComputersWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listComputers");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Computers;

      return this.apiClient.callApi(
        '/computers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Computers
     * Lists all computers.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Computers}
     */
    this.listComputers = function(apiVersion, opts) {
      return this.listComputersWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Computer
     * Modify a computer by ID. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer to modify.
     * @param {module:model/Computer} computer The settings of the computer to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Computer} and HTTP response
     */
    this.modifyComputerWithHttpInfo = function(computerID, computer, apiVersion, opts) {
      opts = opts || {};
      var postBody = computer;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling modifyComputer");
      }

      // verify the required parameter 'computer' is set
      if (computer === undefined || computer === null) {
        throw new Error("Missing the required parameter 'computer' when calling modifyComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Computer;

      return this.apiClient.callApi(
        '/computers/{computerID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Computer
     * Modify a computer by ID. Any unset elements will be left unchanged.
     * @param {Number} computerID The ID number of the computer to modify.
     * @param {module:model/Computer} computer The settings of the computer to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Computer}
     */
    this.modifyComputer = function(computerID, computer, apiVersion, opts) {
      return this.modifyComputerWithHttpInfo(computerID, computer, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Computers
     * Search for computers using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Computers} and HTTP response
     */
    this.searchComputersWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchComputers");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
        'expand': {
          value: opts['expand'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Computers;

      return this.apiClient.callApi(
        '/computers/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Computers
     * Search for computers using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @param {Array.<module:model/String>} opts.expand Determines the computer information to include in the response. Use \&quot;none\&quot; to retrieve only basic computer information such as policyID and hostName. Use one or several expand options to retrieve a tailored response in addition to the basic information. Use \&quot;all\&quot; to retrieve all of the computer information. The default is \&quot;all\&quot;, but we recommend using expand on all requests to improve performance.
     * @param {Boolean} opts.overrides Show only overrides defined for the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Computers}
     */
    this.searchComputers = function(apiVersion, opts) {
      return this.searchComputersWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
