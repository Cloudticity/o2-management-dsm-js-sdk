/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileExtensionList', 'model/FileExtensionLists', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FileExtensionList'), require('../model/FileExtensionLists'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.FileExtensionListsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.FileExtensionList, root.Deepsecurity.FileExtensionLists, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, FileExtensionList, FileExtensionLists, SearchFilter) {
  'use strict';

  /**
   * FileExtensionLists service.
   * @module api/FileExtensionListsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new FileExtensionListsApi. 
   * @alias module:api/FileExtensionListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a File Extension List
     * Create a new file extension list.
     * @param {module:model/FileExtensionList} fileExtensionList The settings of the new file extension list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileExtensionList} and HTTP response
     */
    this.createFileExtensionListWithHttpInfo = function(fileExtensionList, apiVersion) {
      var postBody = fileExtensionList;

      // verify the required parameter 'fileExtensionList' is set
      if (fileExtensionList === undefined || fileExtensionList === null) {
        throw new Error("Missing the required parameter 'fileExtensionList' when calling createFileExtensionList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createFileExtensionList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileExtensionList;

      return this.apiClient.callApi(
        '/fileextensionlists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a File Extension List
     * Create a new file extension list.
     * @param {module:model/FileExtensionList} fileExtensionList The settings of the new file extension list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileExtensionList}
     */
    this.createFileExtensionList = function(fileExtensionList, apiVersion) {
      return this.createFileExtensionListWithHttpInfo(fileExtensionList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a File Extension List
     * Delete a file extension list by ID.
     * @param {Number} fileExtensionListID The ID number of the file extension list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFileExtensionListWithHttpInfo = function(fileExtensionListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'fileExtensionListID' is set
      if (fileExtensionListID === undefined || fileExtensionListID === null) {
        throw new Error("Missing the required parameter 'fileExtensionListID' when calling deleteFileExtensionList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteFileExtensionList");
      }


      var pathParams = {
        'fileExtensionListID': fileExtensionListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fileextensionlists/{fileExtensionListID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a File Extension List
     * Delete a file extension list by ID.
     * @param {Number} fileExtensionListID The ID number of the file extension list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFileExtensionList = function(fileExtensionListID, apiVersion) {
      return this.deleteFileExtensionListWithHttpInfo(fileExtensionListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a File Extension List
     * Describe a file extension list by ID.
     * @param {Number} fileExtensionListID The ID number of the file extension list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileExtensionList} and HTTP response
     */
    this.describeFileExtensionListWithHttpInfo = function(fileExtensionListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'fileExtensionListID' is set
      if (fileExtensionListID === undefined || fileExtensionListID === null) {
        throw new Error("Missing the required parameter 'fileExtensionListID' when calling describeFileExtensionList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeFileExtensionList");
      }


      var pathParams = {
        'fileExtensionListID': fileExtensionListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileExtensionList;

      return this.apiClient.callApi(
        '/fileextensionlists/{fileExtensionListID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a File Extension List
     * Describe a file extension list by ID.
     * @param {Number} fileExtensionListID The ID number of the file extension list to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileExtensionList}
     */
    this.describeFileExtensionList = function(fileExtensionListID, apiVersion) {
      return this.describeFileExtensionListWithHttpInfo(fileExtensionListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List File Extension Lists
     * Lists all file extension lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileExtensionLists} and HTTP response
     */
    this.listFileExtensionListsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listFileExtensionLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileExtensionLists;

      return this.apiClient.callApi(
        '/fileextensionlists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List File Extension Lists
     * Lists all file extension lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileExtensionLists}
     */
    this.listFileExtensionLists = function(apiVersion) {
      return this.listFileExtensionListsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a File Extension List
     * Modify a file extension list by ID. Any unset elements will be left unchanged.
     * @param {Number} fileExtensionListID The ID number of the file extension list to modify.
     * @param {module:model/FileExtensionList} fileExtensionList The settings of the file extension list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileExtensionList} and HTTP response
     */
    this.modifyFileExtensionListWithHttpInfo = function(fileExtensionListID, fileExtensionList, apiVersion) {
      var postBody = fileExtensionList;

      // verify the required parameter 'fileExtensionListID' is set
      if (fileExtensionListID === undefined || fileExtensionListID === null) {
        throw new Error("Missing the required parameter 'fileExtensionListID' when calling modifyFileExtensionList");
      }

      // verify the required parameter 'fileExtensionList' is set
      if (fileExtensionList === undefined || fileExtensionList === null) {
        throw new Error("Missing the required parameter 'fileExtensionList' when calling modifyFileExtensionList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyFileExtensionList");
      }


      var pathParams = {
        'fileExtensionListID': fileExtensionListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileExtensionList;

      return this.apiClient.callApi(
        '/fileextensionlists/{fileExtensionListID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a File Extension List
     * Modify a file extension list by ID. Any unset elements will be left unchanged.
     * @param {Number} fileExtensionListID The ID number of the file extension list to modify.
     * @param {module:model/FileExtensionList} fileExtensionList The settings of the file extension list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileExtensionList}
     */
    this.modifyFileExtensionList = function(fileExtensionListID, fileExtensionList, apiVersion) {
      return this.modifyFileExtensionListWithHttpInfo(fileExtensionListID, fileExtensionList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search File Extension Lists
     * Search for file extension lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileExtensionLists} and HTTP response
     */
    this.searchFileExtensionListsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchFileExtensionLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileExtensionLists;

      return this.apiClient.callApi(
        '/fileextensionlists/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search File Extension Lists
     * Search for file extension lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileExtensionLists}
     */
    this.searchFileExtensionLists = function(apiVersion, opts) {
      return this.searchFileExtensionListsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
