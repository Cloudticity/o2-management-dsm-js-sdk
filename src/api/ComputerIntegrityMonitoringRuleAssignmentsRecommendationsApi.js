/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntegrityMonitoringAssignments', 'model/RuleIDs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntegrityMonitoringAssignments'), require('../model/RuleIDs'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.ComputerIntegrityMonitoringRuleAssignmentsRecommendationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntegrityMonitoringAssignments, root.Deepsecurity.RuleIDs);
  }
}(this, function(ApiClient, IntegrityMonitoringAssignments, RuleIDs) {
  'use strict';

  /**
   * ComputerIntegrityMonitoringRuleAssignmentsRecommendations service.
   * @module api/ComputerIntegrityMonitoringRuleAssignmentsRecommendationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new ComputerIntegrityMonitoringRuleAssignmentsRecommendationsApi. 
   * @alias module:api/ComputerIntegrityMonitoringRuleAssignmentsRecommendationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add Integrity Monitoring Rule IDs
     * Assign integrity monitoring rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.addIntegrityMonitoringRuleIDsToComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['integrityMonitoringRuleIDs'];

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling addIntegrityMonitoringRuleIDsToComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addIntegrityMonitoringRuleIDsToComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/assignments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add Integrity Monitoring Rule IDs
     * Assign integrity monitoring rule IDs to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to add.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.addIntegrityMonitoringRuleIDsToComputer = function(computerID, apiVersion, opts) {
      return this.addIntegrityMonitoringRuleIDsToComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Assigned Integrity Monitoring Rule IDs
     * Lists all integrity monitoring rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.listIntegrityMonitoringRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling listIntegrityMonitoringRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntegrityMonitoringRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/assignments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Assigned Integrity Monitoring Rule IDs
     * Lists all integrity monitoring rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.listIntegrityMonitoringRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.listIntegrityMonitoringRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Integrity Monitoring Rule ID
     * Unassign an integrity monitoring rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.removeIntegrityMonitoringRuleIDFromComputerWithHttpInfo = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling removeIntegrityMonitoringRuleIDFromComputer");
      }

      // verify the required parameter 'integrityMonitoringRuleID' is set
      if (integrityMonitoringRuleID === undefined || integrityMonitoringRuleID === null) {
        throw new Error("Missing the required parameter 'integrityMonitoringRuleID' when calling removeIntegrityMonitoringRuleIDFromComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeIntegrityMonitoringRuleIDFromComputer");
      }


      var pathParams = {
        'computerID': computerID,
        'integrityMonitoringRuleID': integrityMonitoringRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/assignments/{integrityMonitoringRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an Integrity Monitoring Rule ID
     * Unassign an integrity monitoring rule ID from a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {Number} integrityMonitoringRuleID The ID number of the integrity monitoring rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.removeIntegrityMonitoringRuleIDFromComputer = function(computerID, integrityMonitoringRuleID, apiVersion, opts) {
      return this.removeIntegrityMonitoringRuleIDFromComputerWithHttpInfo(computerID, integrityMonitoringRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Integrity Monitoring Rule IDs
     * Set integrity monitoring rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrityMonitoringAssignments} and HTTP response
     */
    this.setIntegrityMonitoringRuleIDsOnComputerWithHttpInfo = function(computerID, apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['integrityMonitoringRuleIDs'];

      // verify the required parameter 'computerID' is set
      if (computerID === undefined || computerID === null) {
        throw new Error("Missing the required parameter 'computerID' when calling setIntegrityMonitoringRuleIDsOnComputer");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setIntegrityMonitoringRuleIDsOnComputer");
      }


      var pathParams = {
        'computerID': computerID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntegrityMonitoringAssignments;

      return this.apiClient.callApi(
        '/computers/{computerID}/integritymonitoring/assignments', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set Integrity Monitoring Rule IDs
     * Set integrity monitoring rule IDs assigned to a computer.
     * @param {Number} computerID The ID number of the computer.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleIDs} opts.integrityMonitoringRuleIDs The ID numbers of the integrity monitoring rules to set.
     * @param {Boolean} opts.overrides Return only rule IDs assigned directly to the current computer.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrityMonitoringAssignments}
     */
    this.setIntegrityMonitoringRuleIDsOnComputer = function(computerID, apiVersion, opts) {
      return this.setIntegrityMonitoringRuleIDsOnComputerWithHttpInfo(computerID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
