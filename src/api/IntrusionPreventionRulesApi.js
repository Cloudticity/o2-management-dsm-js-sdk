/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IntrusionPreventionRule', 'model/IntrusionPreventionRules', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IntrusionPreventionRule'), require('../model/IntrusionPreventionRules'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.IntrusionPreventionRulesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.IntrusionPreventionRule, root.Deepsecurity.IntrusionPreventionRules, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, IntrusionPreventionRule, IntrusionPreventionRules, SearchFilter) {
  'use strict';

  /**
   * IntrusionPreventionRules service.
   * @module api/IntrusionPreventionRulesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new IntrusionPreventionRulesApi. 
   * @alias module:api/IntrusionPreventionRulesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an Intrusion Prevention Rule
     * Create a new intrusion prevention rule.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the new intrusion prevention rule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.createIntrusionPreventionRuleWithHttpInfo = function(intrusionPreventionRule, apiVersion) {
      var postBody = intrusionPreventionRule;

      // verify the required parameter 'intrusionPreventionRule' is set
      if (intrusionPreventionRule === undefined || intrusionPreventionRule === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRule' when calling createIntrusionPreventionRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createIntrusionPreventionRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/intrusionpreventionrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an Intrusion Prevention Rule
     * Create a new intrusion prevention rule.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the new intrusion prevention rule.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.createIntrusionPreventionRule = function(intrusionPreventionRule, apiVersion) {
      return this.createIntrusionPreventionRuleWithHttpInfo(intrusionPreventionRule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Intrusion Prevention Rule
     * Delete an intrusion prevention rule by ID.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIntrusionPreventionRuleWithHttpInfo = function(intrusionPreventionRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling deleteIntrusionPreventionRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteIntrusionPreventionRule");
      }


      var pathParams = {
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/intrusionpreventionrules/{intrusionPreventionRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an Intrusion Prevention Rule
     * Delete an intrusion prevention rule by ID.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIntrusionPreventionRule = function(intrusionPreventionRuleID, apiVersion) {
      return this.deleteIntrusionPreventionRuleWithHttpInfo(intrusionPreventionRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe an Intrusion Prevention Rule
     * Describe an intrusion prevention rule by ID.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.describeIntrusionPreventionRuleWithHttpInfo = function(intrusionPreventionRuleID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling describeIntrusionPreventionRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeIntrusionPreventionRule");
      }


      var pathParams = {
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/intrusionpreventionrules/{intrusionPreventionRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe an Intrusion Prevention Rule
     * Describe an intrusion prevention rule by ID.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.describeIntrusionPreventionRule = function(intrusionPreventionRuleID, apiVersion) {
      return this.describeIntrusionPreventionRuleWithHttpInfo(intrusionPreventionRuleID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Intrusion Prevention Rules
     * Lists all intrusion prevention rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRules} and HTTP response
     */
    this.listIntrusionPreventionRulesWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listIntrusionPreventionRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRules;

      return this.apiClient.callApi(
        '/intrusionpreventionrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Intrusion Prevention Rules
     * Lists all intrusion prevention rules.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRules}
     */
    this.listIntrusionPreventionRules = function(apiVersion) {
      return this.listIntrusionPreventionRulesWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify an Intrusion Prevention Rule
     * Modify an intrusion prevention rule by ID. Any unset elements will be left unchanged.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to modify.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the intrusion prevention rules to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRule} and HTTP response
     */
    this.modifyIntrusionPreventionRuleWithHttpInfo = function(intrusionPreventionRuleID, intrusionPreventionRule, apiVersion) {
      var postBody = intrusionPreventionRule;

      // verify the required parameter 'intrusionPreventionRuleID' is set
      if (intrusionPreventionRuleID === undefined || intrusionPreventionRuleID === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRuleID' when calling modifyIntrusionPreventionRule");
      }

      // verify the required parameter 'intrusionPreventionRule' is set
      if (intrusionPreventionRule === undefined || intrusionPreventionRule === null) {
        throw new Error("Missing the required parameter 'intrusionPreventionRule' when calling modifyIntrusionPreventionRule");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyIntrusionPreventionRule");
      }


      var pathParams = {
        'intrusionPreventionRuleID': intrusionPreventionRuleID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRule;

      return this.apiClient.callApi(
        '/intrusionpreventionrules/{intrusionPreventionRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify an Intrusion Prevention Rule
     * Modify an intrusion prevention rule by ID. Any unset elements will be left unchanged.
     * @param {Number} intrusionPreventionRuleID The ID number of the intrusion prevention rule to modify.
     * @param {module:model/IntrusionPreventionRule} intrusionPreventionRule The settings of the intrusion prevention rules to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRule}
     */
    this.modifyIntrusionPreventionRule = function(intrusionPreventionRuleID, intrusionPreventionRule, apiVersion) {
      return this.modifyIntrusionPreventionRuleWithHttpInfo(intrusionPreventionRuleID, intrusionPreventionRule, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Intrusion Prevention Rules
     * Search for intrusion prevention rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntrusionPreventionRules} and HTTP response
     */
    this.searchIntrusionPreventionRulesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchIntrusionPreventionRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntrusionPreventionRules;

      return this.apiClient.callApi(
        '/intrusionpreventionrules/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Intrusion Prevention Rules
     * Search for intrusion prevention rules using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntrusionPreventionRules}
     */
    this.searchIntrusionPreventionRules = function(apiVersion, opts) {
      return this.searchIntrusionPreventionRulesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
