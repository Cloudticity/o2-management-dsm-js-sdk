/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FirewallRule', 'model/FirewallRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FirewallRule'), require('../model/FirewallRules'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.PolicyFirewallRuleDetailsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.FirewallRule, root.Deepsecurity.FirewallRules);
  }
}(this, function(ApiClient, FirewallRule, FirewallRules) {
  'use strict';

  /**
   * PolicyFirewallRuleDetails service.
   * @module api/PolicyFirewallRuleDetailsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new PolicyFirewallRuleDetailsApi. 
   * @alias module:api/PolicyFirewallRuleDetailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Describe a firewall rule
     * Describe a firewall rule including policy-level overrides.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.describeFirewallRuleOnPolicyWithHttpInfo = function(policyID, firewallRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling describeFirewallRuleOnPolicy");
      }

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling describeFirewallRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeFirewallRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/firewall/rules/{firewallRuleID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a firewall rule
     * Describe a firewall rule including policy-level overrides.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.describeFirewallRuleOnPolicy = function(policyID, firewallRuleID, apiVersion, opts) {
      return this.describeFirewallRuleOnPolicyWithHttpInfo(policyID, firewallRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List firewall rules
     * Lists all firewall rules assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRules} and HTTP response
     */
    this.listFirewallRulesOnPolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling listFirewallRulesOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listFirewallRulesOnPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRules;

      return this.apiClient.callApi(
        '/policies/{policyID}/firewall/rules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List firewall rules
     * Lists all firewall rules assigned to a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only rules assigned to the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRules}
     */
    this.listFirewallRulesOnPolicy = function(policyID, apiVersion, opts) {
      return this.listFirewallRulesOnPolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a firewall rule
     * Modify a firewall rule assigned to a policy. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule to modify.
     * @param {module:model/FirewallRule} firewallRule The settings of the firewall rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.modifyFirewallRuleOnPolicyWithHttpInfo = function(policyID, firewallRuleID, firewallRule, apiVersion, opts) {
      opts = opts || {};
      var postBody = firewallRule;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling modifyFirewallRuleOnPolicy");
      }

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling modifyFirewallRuleOnPolicy");
      }

      // verify the required parameter 'firewallRule' is set
      if (firewallRule === undefined || firewallRule === null) {
        throw new Error("Missing the required parameter 'firewallRule' when calling modifyFirewallRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyFirewallRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/firewall/rules/{firewallRuleID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a firewall rule
     * Modify a firewall rule assigned to a policy. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule to modify.
     * @param {module:model/FirewallRule} firewallRule The settings of the firewall rule to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.modifyFirewallRuleOnPolicy = function(policyID, firewallRuleID, firewallRule, apiVersion, opts) {
      return this.modifyFirewallRuleOnPolicyWithHttpInfo(policyID, firewallRuleID, firewallRule, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset firewall rule overrides
     * Remove all overrides for a firewall rule from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallRule} and HTTP response
     */
    this.resetFirewallRuleOnPolicyWithHttpInfo = function(policyID, firewallRuleID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling resetFirewallRuleOnPolicy");
      }

      // verify the required parameter 'firewallRuleID' is set
      if (firewallRuleID === undefined || firewallRuleID === null) {
        throw new Error("Missing the required parameter 'firewallRuleID' when calling resetFirewallRuleOnPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resetFirewallRuleOnPolicy");
      }


      var pathParams = {
        'policyID': policyID,
        'firewallRuleID': firewallRuleID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FirewallRule;

      return this.apiClient.callApi(
        '/policies/{policyID}/firewall/rules/{firewallRuleID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset firewall rule overrides
     * Remove all overrides for a firewall rule from a policy.
     * @param {Number} policyID The ID number of the policy.
     * @param {Number} firewallRuleID The ID number of the firewall rule to reset.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallRule}
     */
    this.resetFirewallRuleOnPolicy = function(policyID, firewallRuleID, apiVersion, opts) {
      return this.resetFirewallRuleOnPolicyWithHttpInfo(policyID, firewallRuleID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
