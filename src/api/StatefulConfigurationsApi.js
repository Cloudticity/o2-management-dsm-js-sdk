/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SearchFilter', 'model/StatefulConfiguration', 'model/StatefulConfigurations'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SearchFilter'), require('../model/StatefulConfiguration'), require('../model/StatefulConfigurations'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.StatefulConfigurationsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.SearchFilter, root.Deepsecurity.StatefulConfiguration, root.Deepsecurity.StatefulConfigurations);
  }
}(this, function(ApiClient, SearchFilter, StatefulConfiguration, StatefulConfigurations) {
  'use strict';

  /**
   * StatefulConfigurations service.
   * @module api/StatefulConfigurationsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new StatefulConfigurationsApi. 
   * @alias module:api/StatefulConfigurationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Stateful Configuration
     * Create a new stateful configuration.
     * @param {module:model/StatefulConfiguration} statefulConfigurations The settings of the new stateful configuration.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatefulConfiguration} and HTTP response
     */
    this.createStatefulConfigurationWithHttpInfo = function(statefulConfigurations, apiVersion) {
      var postBody = statefulConfigurations;

      // verify the required parameter 'statefulConfigurations' is set
      if (statefulConfigurations === undefined || statefulConfigurations === null) {
        throw new Error("Missing the required parameter 'statefulConfigurations' when calling createStatefulConfiguration");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createStatefulConfiguration");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatefulConfiguration;

      return this.apiClient.callApi(
        '/statefulconfigurations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Stateful Configuration
     * Create a new stateful configuration.
     * @param {module:model/StatefulConfiguration} statefulConfigurations The settings of the new stateful configuration.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatefulConfiguration}
     */
    this.createStatefulConfiguration = function(statefulConfigurations, apiVersion) {
      return this.createStatefulConfigurationWithHttpInfo(statefulConfigurations, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Stateful Configuration
     * Delete a stateful configuration by ID.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteStatefulConfigurationWithHttpInfo = function(statefulConfigurationID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'statefulConfigurationID' is set
      if (statefulConfigurationID === undefined || statefulConfigurationID === null) {
        throw new Error("Missing the required parameter 'statefulConfigurationID' when calling deleteStatefulConfiguration");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteStatefulConfiguration");
      }


      var pathParams = {
        'statefulConfigurationID': statefulConfigurationID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/statefulconfigurations/{statefulConfigurationID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Stateful Configuration
     * Delete a stateful configuration by ID.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteStatefulConfiguration = function(statefulConfigurationID, apiVersion) {
      return this.deleteStatefulConfigurationWithHttpInfo(statefulConfigurationID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Stateful Configuration
     * Describe a stateful configuration by ID.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatefulConfiguration} and HTTP response
     */
    this.describeStatefulConfigurationWithHttpInfo = function(statefulConfigurationID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'statefulConfigurationID' is set
      if (statefulConfigurationID === undefined || statefulConfigurationID === null) {
        throw new Error("Missing the required parameter 'statefulConfigurationID' when calling describeStatefulConfiguration");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeStatefulConfiguration");
      }


      var pathParams = {
        'statefulConfigurationID': statefulConfigurationID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatefulConfiguration;

      return this.apiClient.callApi(
        '/statefulconfigurations/{statefulConfigurationID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Stateful Configuration
     * Describe a stateful configuration by ID.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatefulConfiguration}
     */
    this.describeStatefulConfiguration = function(statefulConfigurationID, apiVersion) {
      return this.describeStatefulConfigurationWithHttpInfo(statefulConfigurationID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Stateful Configurations
     * Lists all stateful configurations.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatefulConfigurations} and HTTP response
     */
    this.listStatefulConfigurationsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listStatefulConfigurations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatefulConfigurations;

      return this.apiClient.callApi(
        '/statefulconfigurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Stateful Configurations
     * Lists all stateful configurations.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatefulConfigurations}
     */
    this.listStatefulConfigurations = function(apiVersion) {
      return this.listStatefulConfigurationsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Stateful Configuration
     * Modify a stateful configuration by ID. Any unset elements will be left unchanged.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to modify.
     * @param {module:model/StatefulConfiguration} statefulConfiguration The settings of the stateful configuration to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatefulConfiguration} and HTTP response
     */
    this.modifyStatefulConfigurationWithHttpInfo = function(statefulConfigurationID, statefulConfiguration, apiVersion) {
      var postBody = statefulConfiguration;

      // verify the required parameter 'statefulConfigurationID' is set
      if (statefulConfigurationID === undefined || statefulConfigurationID === null) {
        throw new Error("Missing the required parameter 'statefulConfigurationID' when calling modifyStatefulConfiguration");
      }

      // verify the required parameter 'statefulConfiguration' is set
      if (statefulConfiguration === undefined || statefulConfiguration === null) {
        throw new Error("Missing the required parameter 'statefulConfiguration' when calling modifyStatefulConfiguration");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyStatefulConfiguration");
      }


      var pathParams = {
        'statefulConfigurationID': statefulConfigurationID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatefulConfiguration;

      return this.apiClient.callApi(
        '/statefulconfigurations/{statefulConfigurationID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Stateful Configuration
     * Modify a stateful configuration by ID. Any unset elements will be left unchanged.
     * @param {Number} statefulConfigurationID The ID number of the stateful configuration to modify.
     * @param {module:model/StatefulConfiguration} statefulConfiguration The settings of the stateful configuration to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatefulConfiguration}
     */
    this.modifyStatefulConfiguration = function(statefulConfigurationID, statefulConfiguration, apiVersion) {
      return this.modifyStatefulConfigurationWithHttpInfo(statefulConfigurationID, statefulConfiguration, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Stateful Configurations
     * Search for stateful configurations using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatefulConfigurations} and HTTP response
     */
    this.searchStatefulConfigurationsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchStatefulConfigurations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StatefulConfigurations;

      return this.apiClient.callApi(
        '/statefulconfigurations/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Stateful Configurations
     * Search for stateful configurations using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatefulConfigurations}
     */
    this.searchStatefulConfigurations = function(apiVersion, opts) {
      return this.searchStatefulConfigurationsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
