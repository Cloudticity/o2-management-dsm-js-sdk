/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FileList', 'model/FileLists', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FileList'), require('../model/FileLists'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.FileListsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.FileList, root.Deepsecurity.FileLists, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, FileList, FileLists, SearchFilter) {
  'use strict';

  /**
   * FileLists service.
   * @module api/FileListsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new FileListsApi. 
   * @alias module:api/FileListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a File List
     * Create a new file list.
     * @param {module:model/FileList} fileList The settings of the new file list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileList} and HTTP response
     */
    this.createFileListWithHttpInfo = function(fileList, apiVersion) {
      var postBody = fileList;

      // verify the required parameter 'fileList' is set
      if (fileList === undefined || fileList === null) {
        throw new Error("Missing the required parameter 'fileList' when calling createFileList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createFileList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileList;

      return this.apiClient.callApi(
        '/filelists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a File List
     * Create a new file list.
     * @param {module:model/FileList} fileList The settings of the new file list.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileList}
     */
    this.createFileList = function(fileList, apiVersion) {
      return this.createFileListWithHttpInfo(fileList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a File List
     * Delete a file list by ID.
     * @param {Number} fileListID The ID number of the file list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFileListWithHttpInfo = function(fileListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'fileListID' is set
      if (fileListID === undefined || fileListID === null) {
        throw new Error("Missing the required parameter 'fileListID' when calling deleteFileList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteFileList");
      }


      var pathParams = {
        'fileListID': fileListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/filelists/{fileListID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a File List
     * Delete a file list by ID.
     * @param {Number} fileListID The ID number of the file list to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFileList = function(fileListID, apiVersion) {
      return this.deleteFileListWithHttpInfo(fileListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a File List
     * Describe a file list by ID.
     * @param {Number} fileListID The ID number of the anti-malware configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileList} and HTTP response
     */
    this.describeFileListWithHttpInfo = function(fileListID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'fileListID' is set
      if (fileListID === undefined || fileListID === null) {
        throw new Error("Missing the required parameter 'fileListID' when calling describeFileList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeFileList");
      }


      var pathParams = {
        'fileListID': fileListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileList;

      return this.apiClient.callApi(
        '/filelists/{fileListID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a File List
     * Describe a file list by ID.
     * @param {Number} fileListID The ID number of the anti-malware configuration to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileList}
     */
    this.describeFileList = function(fileListID, apiVersion) {
      return this.describeFileListWithHttpInfo(fileListID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List File Lists
     * Lists all file lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileLists} and HTTP response
     */
    this.listFileListsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listFileLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileLists;

      return this.apiClient.callApi(
        '/filelists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List File Lists
     * Lists all file lists.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileLists}
     */
    this.listFileLists = function(apiVersion) {
      return this.listFileListsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a File List
     * Modify a file list by ID. Any unset elements will be left unchanged.
     * @param {Number} fileListID The ID number of the file list to modify.
     * @param {module:model/FileList} fileList The settings of the file list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileList} and HTTP response
     */
    this.modifyFileListWithHttpInfo = function(fileListID, fileList, apiVersion) {
      var postBody = fileList;

      // verify the required parameter 'fileListID' is set
      if (fileListID === undefined || fileListID === null) {
        throw new Error("Missing the required parameter 'fileListID' when calling modifyFileList");
      }

      // verify the required parameter 'fileList' is set
      if (fileList === undefined || fileList === null) {
        throw new Error("Missing the required parameter 'fileList' when calling modifyFileList");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyFileList");
      }


      var pathParams = {
        'fileListID': fileListID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileList;

      return this.apiClient.callApi(
        '/filelists/{fileListID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a File List
     * Modify a file list by ID. Any unset elements will be left unchanged.
     * @param {Number} fileListID The ID number of the file list to modify.
     * @param {module:model/FileList} fileList The settings of the file list to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileList}
     */
    this.modifyFileList = function(fileListID, fileList, apiVersion) {
      return this.modifyFileListWithHttpInfo(fileListID, fileList, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search File Lists
     * Search for file lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileLists} and HTTP response
     */
    this.searchFileListsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchFileLists");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileLists;

      return this.apiClient.callApi(
        '/filelists/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search File Lists
     * Search for file lists using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileLists}
     */
    this.searchFileLists = function(apiVersion, opts) {
      return this.searchFileListsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
