/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiKey', 'model/SearchFilter', 'model/Tenant', 'model/Tenants'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiKey'), require('../model/SearchFilter'), require('../model/Tenant'), require('../model/Tenants'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.TenantsApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.ApiKey, root.Deepsecurity.SearchFilter, root.Deepsecurity.Tenant, root.Deepsecurity.Tenants);
  }
}(this, function(ApiClient, ApiKey, SearchFilter, Tenant, Tenants) {
  'use strict';

  /**
   * Tenants service.
   * @module api/TenantsApi
   * @version 12.0.446
   */

  /**
   * Constructs a new TenantsApi. 
   * @alias module:api/TenantsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Tenant
     * Create a new tenant.
     * @param {module:model/Tenant} tenant The settings of the new tenant.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.bypassTenantCache Indicates whether to bypass the tenant cache or not. Default value is false. (default to false)
     * @param {Boolean} opts.confirmationRequired Indicates whether a confirmation email is required or not. Default value is true. (default to true)
     * @param {Boolean} opts.asynchronous Indicates whether it&#39;s an asynchronous call. Default value is false. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tenant} and HTTP response
     */
    this.createTenantWithHttpInfo = function(tenant, apiVersion, opts) {
      opts = opts || {};
      var postBody = tenant;

      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createTenant");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createTenant");
      }


      var pathParams = {
      };
      var queryParams = {
        'bypassTenantCache': opts['bypassTenantCache'],
        'confirmationRequired': opts['confirmationRequired'],
        'asynchronous': opts['asynchronous'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tenant;

      return this.apiClient.callApi(
        '/tenants', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Tenant
     * Create a new tenant.
     * @param {module:model/Tenant} tenant The settings of the new tenant.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.bypassTenantCache Indicates whether to bypass the tenant cache or not. Default value is false. (default to false)
     * @param {Boolean} opts.confirmationRequired Indicates whether a confirmation email is required or not. Default value is true. (default to true)
     * @param {Boolean} opts.asynchronous Indicates whether it&#39;s an asynchronous call. Default value is false. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tenant}
     */
    this.createTenant = function(tenant, apiVersion, opts) {
      return this.createTenantWithHttpInfo(tenant, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Tenant
     * Delete a tenant by ID.
     * @param {Number} tenantID The ID number of the tenant to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTenantWithHttpInfo = function(tenantID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling deleteTenant");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteTenant");
      }


      var pathParams = {
        'tenantID': tenantID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Tenant
     * Delete a tenant by ID.
     * @param {Number} tenantID The ID number of the tenant to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTenant = function(tenantID, apiVersion) {
      return this.deleteTenantWithHttpInfo(tenantID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Tenant
     * Describe a tenant by ID.
     * @param {Number} tenantID The ID number of the tenant to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tenant} and HTTP response
     */
    this.describeTenantWithHttpInfo = function(tenantID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling describeTenant");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describeTenant");
      }


      var pathParams = {
        'tenantID': tenantID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tenant;

      return this.apiClient.callApi(
        '/tenants/{tenantID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Tenant
     * Describe a tenant by ID.
     * @param {Number} tenantID The ID number of the tenant to describe.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tenant}
     */
    this.describeTenant = function(tenantID, apiVersion) {
      return this.describeTenantWithHttpInfo(tenantID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate an API Key for the Tenant
     * Generate a new API key for a tenant from the primary account. This key will be expired after 6 hours if no expiryDate set.
     * @param {Number} tenantID The ID number of the tenant the key is being generated for.
     * @param {module:model/ApiKey} apiKey The settings of the new API key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiKey} and HTTP response
     */
    this.generateTenantApiSecretKeyWithHttpInfo = function(tenantID, apiKey, apiVersion) {
      var postBody = apiKey;

      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling generateTenantApiSecretKey");
      }

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling generateTenantApiSecretKey");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling generateTenantApiSecretKey");
      }


      var pathParams = {
        'tenantID': tenantID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/tenants/{tenantID}/apikeys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate an API Key for the Tenant
     * Generate a new API key for a tenant from the primary account. This key will be expired after 6 hours if no expiryDate set.
     * @param {Number} tenantID The ID number of the tenant the key is being generated for.
     * @param {module:model/ApiKey} apiKey The settings of the new API key.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiKey}
     */
    this.generateTenantApiSecretKey = function(tenantID, apiKey, apiVersion) {
      return this.generateTenantApiSecretKeyWithHttpInfo(tenantID, apiKey, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Tenants
     * Lists all tenants.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tenants} and HTTP response
     */
    this.listTenantsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listTenants");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tenants;

      return this.apiClient.callApi(
        '/tenants', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Tenants
     * Lists all tenants.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tenants}
     */
    this.listTenants = function(apiVersion) {
      return this.listTenantsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Tenant
     * Modify a tenant by ID. Any unset elements will be left unchanged.
     * @param {Number} tenantID The ID number of the tenant to modify.
     * @param {module:model/Tenant} tenant The settings of the tenant to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tenant} and HTTP response
     */
    this.modifyTenantWithHttpInfo = function(tenantID, tenant, apiVersion) {
      var postBody = tenant;

      // verify the required parameter 'tenantID' is set
      if (tenantID === undefined || tenantID === null) {
        throw new Error("Missing the required parameter 'tenantID' when calling modifyTenant");
      }

      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling modifyTenant");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyTenant");
      }


      var pathParams = {
        'tenantID': tenantID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tenant;

      return this.apiClient.callApi(
        '/tenants/{tenantID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Tenant
     * Modify a tenant by ID. Any unset elements will be left unchanged.
     * @param {Number} tenantID The ID number of the tenant to modify.
     * @param {module:model/Tenant} tenant The settings of the tenant to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tenant}
     */
    this.modifyTenant = function(tenantID, tenant, apiVersion) {
      return this.modifyTenantWithHttpInfo(tenantID, tenant, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Tenants
     * Search for tenants using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tenants} and HTTP response
     */
    this.searchTenantsWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchTenants");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tenants;

      return this.apiClient.callApi(
        '/tenants/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Tenants
     * Search for tenants using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tenants}
     */
    this.searchTenants = function(apiVersion, opts) {
      return this.searchTenantsWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
