/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultPolicySettings', 'model/Policies', 'model/Policy', 'model/SearchFilter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultPolicySettings'), require('../model/Policies'), require('../model/Policy'), require('../model/SearchFilter'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.PoliciesApi = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.DefaultPolicySettings, root.Deepsecurity.Policies, root.Deepsecurity.Policy, root.Deepsecurity.SearchFilter);
  }
}(this, function(ApiClient, DefaultPolicySettings, Policies, Policy, SearchFilter) {
  'use strict';

  /**
   * Policies service.
   * @module api/PoliciesApi
   * @version 12.0.446
   */

  /**
   * Constructs a new PoliciesApi. 
   * @alias module:api/PoliciesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a Policy
     * Create a new policy.
     * @param {module:model/Policy} policy The settings of the new policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Policy} and HTTP response
     */
    this.createPolicyWithHttpInfo = function(policy, apiVersion, opts) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling createPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createPolicy");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Policy;

      return this.apiClient.callApi(
        '/policies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Policy
     * Create a new policy.
     * @param {module:model/Policy} policy The settings of the new policy.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Policy}
     */
    this.createPolicy = function(policy, apiVersion, opts) {
      return this.createPolicyWithHttpInfo(policy, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Policy
     * Delete a policy by ID.
     * @param {Number} policyID The ID number of the policy to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePolicyWithHttpInfo = function(policyID, apiVersion) {
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling deletePolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deletePolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/policies/{policyID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Policy
     * Delete a policy by ID.
     * @param {Number} policyID The ID number of the policy to delete.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePolicy = function(policyID, apiVersion) {
      return this.deletePolicyWithHttpInfo(policyID, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Describe a Policy
     * Describe a policy by ID.
     * @param {Number} policyID The ID number of the policy to describe.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Policy} and HTTP response
     */
    this.describePolicyWithHttpInfo = function(policyID, apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling describePolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling describePolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Policy;

      return this.apiClient.callApi(
        '/policies/{policyID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Describe a Policy
     * Describe a policy by ID.
     * @param {Number} policyID The ID number of the policy to describe.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Policy}
     */
    this.describePolicy = function(policyID, apiVersion, opts) {
      return this.describePolicyWithHttpInfo(policyID, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Default Settings
     * Lists all default policy settings.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DefaultPolicySettings} and HTTP response
     */
    this.listDefaultSettingsWithHttpInfo = function(apiVersion) {
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listDefaultSettings");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultPolicySettings;

      return this.apiClient.callApi(
        '/policies/default', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Default Settings
     * Lists all default policy settings.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DefaultPolicySettings}
     */
    this.listDefaultSettings = function(apiVersion) {
      return this.listDefaultSettingsWithHttpInfo(apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Policies
     * Lists all policies.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Policies} and HTTP response
     */
    this.listPoliciesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listPolicies");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Policies;

      return this.apiClient.callApi(
        '/policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Policies
     * Lists all policies.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Policies}
     */
    this.listPolicies = function(apiVersion, opts) {
      return this.listPoliciesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify Default Settings
     * Modify the default policy settings. Any unset elements will be left unchanged.
     * @param {module:model/DefaultPolicySettings} defaultPolicySettings The default policy settings to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DefaultPolicySettings} and HTTP response
     */
    this.modifyDefaultSettingsWithHttpInfo = function(defaultPolicySettings, apiVersion) {
      var postBody = defaultPolicySettings;

      // verify the required parameter 'defaultPolicySettings' is set
      if (defaultPolicySettings === undefined || defaultPolicySettings === null) {
        throw new Error("Missing the required parameter 'defaultPolicySettings' when calling modifyDefaultSettings");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyDefaultSettings");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultPolicySettings;

      return this.apiClient.callApi(
        '/policies/default', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify Default Settings
     * Modify the default policy settings. Any unset elements will be left unchanged.
     * @param {module:model/DefaultPolicySettings} defaultPolicySettings The default policy settings to modify.
     * @param {String} apiVersion The version of the api being called.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DefaultPolicySettings}
     */
    this.modifyDefaultSettings = function(defaultPolicySettings, apiVersion) {
      return this.modifyDefaultSettingsWithHttpInfo(defaultPolicySettings, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify a Policy
     * Modify a policy by ID. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy to modify.
     * @param {module:model/Policy} policy The settings of the policy to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Policy} and HTTP response
     */
    this.modifyPolicyWithHttpInfo = function(policyID, policy, apiVersion, opts) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'policyID' is set
      if (policyID === undefined || policyID === null) {
        throw new Error("Missing the required parameter 'policyID' when calling modifyPolicy");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling modifyPolicy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling modifyPolicy");
      }


      var pathParams = {
        'policyID': policyID
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Policy;

      return this.apiClient.callApi(
        '/policies/{policyID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modify a Policy
     * Modify a policy by ID. Any unset elements will be left unchanged.
     * @param {Number} policyID The ID number of the policy to modify.
     * @param {module:model/Policy} policy The settings of the policy to modify.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Policy}
     */
    this.modifyPolicy = function(policyID, policy, apiVersion, opts) {
      return this.modifyPolicyWithHttpInfo(policyID, policy, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Policies
     * Search for policies using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Policies} and HTTP response
     */
    this.searchPoliciesWithHttpInfo = function(apiVersion, opts) {
      opts = opts || {};
      var postBody = opts['searchFilter'];

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling searchPolicies");
      }


      var pathParams = {
      };
      var queryParams = {
        'overrides': opts['overrides'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'api-version': apiVersion
      };
      var formParams = {
      };

      var authNames = ['DefaultAuthentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Policies;

      return this.apiClient.callApi(
        '/policies/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Policies
     * Search for policies using optional filters.
     * @param {String} apiVersion The version of the api being called.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchFilter} opts.searchFilter A collection of options used to filter the search results.
     * @param {Boolean} opts.overrides Show only overrides defined for the current policy.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Policies}
     */
    this.searchPolicies = function(apiVersion, opts) {
      return this.searchPoliciesWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
