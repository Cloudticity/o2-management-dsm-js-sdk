/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Administrator'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Administrator'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.Tenant = factory(root.Deepsecurity.ApiClient, root.Deepsecurity.Administrator);
  }
}(this, function(ApiClient, Administrator) {
  'use strict';




  /**
   * The Tenant model module.
   * @module model/Tenant
   * @version 12.0.446
   */

  /**
   * Constructs a new <code>Tenant</code>.
   * Tenant details.
   * @alias module:model/Tenant
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>Tenant</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Tenant} obj Optional instance to populate.
   * @return {module:model/Tenant} The populated <code>Tenant</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('databaseServerID')) {
        obj['databaseServerID'] = ApiClient.convertToType(data['databaseServerID'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('agentInitiatedActivationPassword')) {
        obj['agentInitiatedActivationPassword'] = ApiClient.convertToType(data['agentInitiatedActivationPassword'], 'String');
      }
      if (data.hasOwnProperty('timeZone')) {
        obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
      }
      if (data.hasOwnProperty('locale')) {
        obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
      }
      if (data.hasOwnProperty('demoMode')) {
        obj['demoMode'] = ApiClient.convertToType(data['demoMode'], 'Boolean');
      }
      if (data.hasOwnProperty('modulesVisible')) {
        obj['modulesVisible'] = ApiClient.convertToType(data['modulesVisible'], ['String']);
      }
      if (data.hasOwnProperty('hideUnlicensedModules')) {
        obj['hideUnlicensedModules'] = ApiClient.convertToType(data['hideUnlicensedModules'], 'Boolean');
      }
      if (data.hasOwnProperty('lastSigninTime')) {
        obj['lastSigninTime'] = ApiClient.convertToType(data['lastSigninTime'], 'Number');
      }
      if (data.hasOwnProperty('tenantState')) {
        obj['tenantState'] = ApiClient.convertToType(data['tenantState'], 'String');
      }
      if (data.hasOwnProperty('activationCodes')) {
        obj['activationCodes'] = ApiClient.convertToType(data['activationCodes'], ['String']);
      }
      if (data.hasOwnProperty('administrator')) {
        obj['administrator'] = Administrator.constructFromObject(data['administrator']);
      }
      if (data.hasOwnProperty('primaryContacts')) {
        obj['primaryContacts'] = ApiClient.convertToType(data['primaryContacts'], [Administrator]);
      }
      if (data.hasOwnProperty('guid')) {
        obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
      }
    }
    return obj;
  }

  /**
   * ID of the tenant database server. Searchable as Numeric.
   * @member {Number} databaseServerID
   */
  exports.prototype['databaseServerID'] = undefined;
  /**
   * Display name of the tenant. Searchable as String.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Description of the tenant. Searchable as String.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Activation token required to invoke agent-initiated activation for non-primary tenant users.
   * @member {String} agentInitiatedActivationPassword
   */
  exports.prototype['agentInitiatedActivationPassword'] = undefined;
  /**
   * Time zone ID of the tenant (for example: \"America/New_York\"). Searchable as String.
   * @member {String} timeZone
   */
  exports.prototype['timeZone'] = undefined;
  /**
   * Locale of the tenant. Determines the language of the Deep Security Manager user interface.
   * @member {module:model/Tenant.LocaleEnum} locale
   */
  exports.prototype['locale'] = undefined;
  /**
   * Populates the Deep Security Manager database with simulated computers, events, alerts and other data. Useful for testing environments. Set to true to enable. Searchable as Boolean.
   * @member {Boolean} demoMode
   */
  exports.prototype['demoMode'] = undefined;
  /**
   * Protection modules shown within the Deep Security Manager. All modules are visible by default.
   * @member {Array.<module:model/Tenant.ModulesVisibleEnum>} modulesVisible
   */
  exports.prototype['modulesVisible'] = undefined;
  /**
   * Controls whether unlicensed protection modules appear in the Deep Security Manager for tenants. Set to true to hide all unlicensed protection modules. Searchable as Boolean.
   * @member {Boolean} hideUnlicensedModules
   */
  exports.prototype['hideUnlicensedModules'] = undefined;
  /**
   * Timestamp indicates the last time any tenant user signed in, in milliseconds since epoch. Searchable as Date.
   * @member {Number} lastSigninTime
   */
  exports.prototype['lastSigninTime'] = undefined;
  /**
   * State of the tenant. Searchable as Choice.
   * @member {module:model/Tenant.TenantStateEnum} tenantState
   */
  exports.prototype['tenantState'] = undefined;
  /**
   * List of comma-delimited activation codes for the protection modules.
   * @member {Array.<String>} activationCodes
   */
  exports.prototype['activationCodes'] = undefined;
  /**
   * First administrator created for the tenant. Only the username, password and emailAddress fields will be used during creation.
   * @member {module:model/Administrator} administrator
   */
  exports.prototype['administrator'] = undefined;
  /**
   * Primary contacts of the tenant. Only the ID, roleID, username, and emailAddress fields are returned in responses.
   * @member {Array.<module:model/Administrator>} primaryContacts
   */
  exports.prototype['primaryContacts'] = undefined;
  /**
   * @member {String} guid
   */
  exports.prototype['guid'] = undefined;
  /**
   * ID of the tenant. Searchable as ID.
   * @member {Number} ID
   */
  exports.prototype['ID'] = undefined;


  /**
   * Allowed values for the <code>locale</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LocaleEnum = {
    /**
     * value: "en-US"
     * @const
     */
    "en-US": "en-US",
    /**
     * value: "ja-JP"
     * @const
     */
    "ja-JP": "ja-JP"  };

  /**
   * Allowed values for the <code>modulesVisible</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ModulesVisibleEnum = {
    /**
     * value: "all"
     * @const
     */
    "all": "all",
    /**
     * value: "anti-malware"
     * @const
     */
    "anti-malware": "anti-malware",
    /**
     * value: "web-reputation"
     * @const
     */
    "web-reputation": "web-reputation",
    /**
     * value: "firewall"
     * @const
     */
    "firewall": "firewall",
    /**
     * value: "intrusion-prevention"
     * @const
     */
    "intrusion-prevention": "intrusion-prevention",
    /**
     * value: "integrity-monitoring"
     * @const
     */
    "integrity-monitoring": "integrity-monitoring",
    /**
     * value: "log-inspection"
     * @const
     */
    "log-inspection": "log-inspection",
    /**
     * value: "application-control"
     * @const
     */
    "application-control": "application-control",
    /**
     * value: "SAP"
     * @const
     */
    "SAP": "SAP"  };

  /**
   * Allowed values for the <code>tenantState</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TenantStateEnum = {
    /**
     * value: "undefined"
     * @const
     */
    "undefined": "undefined",
    /**
     * value: "created"
     * @const
     */
    "created": "created",
    /**
     * value: "active"
     * @const
     */
    "active": "active",
    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",
    /**
     * value: "pending-deletion"
     * @const
     */
    "pending-deletion": "pending-deletion",
    /**
     * value: "db-upgrade-failure"
     * @const
     */
    "db-upgrade-failure": "db-upgrade-failure",
    /**
     * value: "confirmation-required"
     * @const
     */
    "confirmation-required": "confirmation-required",
    /**
     * value: "cache-requires-initialization"
     * @const
     */
    "cache-requires-initialization": "cache-requires-initialization",
    /**
     * value: "cache-initializing"
     * @const
     */
    "cache-initializing": "cache-initializing",
    /**
     * value: "cache-ready-for-use"
     * @const
     */
    "cache-ready-for-use": "cache-ready-for-use",
    /**
     * value: "cache-activating"
     * @const
     */
    "cache-activating": "cache-activating"  };


  return exports;
}));



