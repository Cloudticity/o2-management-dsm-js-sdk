/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.SearchCriteria = factory(root.Deepsecurity.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SearchCriteria model module.
   * @module model/SearchCriteria
   * @version 12.0.446
   */

  /**
   * Constructs a new <code>SearchCriteria</code>.
   * Defines search criteria for use within a SearchFilter. Identifies the field of an object to test, the value to test against, and the type of test to perform, such as \\\&quot;equal\&quot;\\ or \\\&quot;greater-than\&quot;\\.
   * @alias module:model/SearchCriteria
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>SearchCriteria</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SearchCriteria} obj Optional instance to populate.
   * @return {module:model/SearchCriteria} The populated <code>SearchCriteria</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fieldName')) {
        obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
      }
      if (data.hasOwnProperty('booleanTest')) {
        obj['booleanTest'] = ApiClient.convertToType(data['booleanTest'], 'Boolean');
      }
      if (data.hasOwnProperty('numericTest')) {
        obj['numericTest'] = ApiClient.convertToType(data['numericTest'], 'String');
      }
      if (data.hasOwnProperty('numericValue')) {
        obj['numericValue'] = ApiClient.convertToType(data['numericValue'], 'Number');
      }
      if (data.hasOwnProperty('stringTest')) {
        obj['stringTest'] = ApiClient.convertToType(data['stringTest'], 'String');
      }
      if (data.hasOwnProperty('stringValue')) {
        obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
      }
      if (data.hasOwnProperty('stringWildcards')) {
        obj['stringWildcards'] = ApiClient.convertToType(data['stringWildcards'], 'Boolean');
      }
      if (data.hasOwnProperty('choiceTest')) {
        obj['choiceTest'] = ApiClient.convertToType(data['choiceTest'], 'String');
      }
      if (data.hasOwnProperty('choiceValue')) {
        obj['choiceValue'] = ApiClient.convertToType(data['choiceValue'], 'String');
      }
      if (data.hasOwnProperty('firstDateValue')) {
        obj['firstDateValue'] = ApiClient.convertToType(data['firstDateValue'], 'Number');
      }
      if (data.hasOwnProperty('firstDateInclusive')) {
        obj['firstDateInclusive'] = ApiClient.convertToType(data['firstDateInclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('lastDateValue')) {
        obj['lastDateValue'] = ApiClient.convertToType(data['lastDateValue'], 'Number');
      }
      if (data.hasOwnProperty('lastDateInclusive')) {
        obj['lastDateInclusive'] = ApiClient.convertToType(data['lastDateInclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('nullTest')) {
        obj['nullTest'] = ApiClient.convertToType(data['nullTest'], 'Boolean');
      }
      if (data.hasOwnProperty('idValue')) {
        obj['idValue'] = ApiClient.convertToType(data['idValue'], 'Number');
      }
      if (data.hasOwnProperty('idTest')) {
        obj['idTest'] = ApiClient.convertToType(data['idTest'], 'String');
      }
    }
    return obj;
  }

  /**
   * Name of the field to be tested. Required for all tests except idTest.
   * @member {String} fieldName
   */
  exports.prototype['fieldName'] = undefined;
  /**
   * Boolean test, suitable for boolean fields. Default \"true\".
   * @member {Boolean} booleanTest
   */
  exports.prototype['booleanTest'] = undefined;
  /**
   * Numeric test, suitable for numeric fields, used in conjuction with the numericValue. Default \"equal\".
   * @member {module:model/SearchCriteria.NumericTestEnum} numericTest
   */
  exports.prototype['numericTest'] = undefined;
  /**
   * Value used by the numericTest. Required when performing a numericTest.
   * @member {Number} numericValue
   */
  exports.prototype['numericValue'] = undefined;
  /**
   * String test, suitable for string fields, used in conjuction with the stringValue and stringWildcards. Default \"equal\".
   * @member {module:model/SearchCriteria.StringTestEnum} stringTest
   */
  exports.prototype['stringTest'] = undefined;
  /**
   * Value used by the stringTest. Required when performing a stringTest.
   * @member {String} stringValue
   */
  exports.prototype['stringValue'] = undefined;
  /**
   * Controls whether or not wildcard characters (`%` and `_`) are treated as wildcards (true) or regular characters (false). Default \"true\".
   * @member {Boolean} stringWildcards
   */
  exports.prototype['stringWildcards'] = undefined;
  /**
   * Choice test, suitable for enum fields, used in conjuction with the choiceValue. Default \"equal\".
   * @member {module:model/SearchCriteria.ChoiceTestEnum} choiceTest
   */
  exports.prototype['choiceTest'] = undefined;
  /**
   * Value used by the choiceTest. Required when performing a choiceTest.
   * @member {String} choiceValue
   */
  exports.prototype['choiceValue'] = undefined;
  /**
   * First (low) date used to find objects within a date range.  Null (the default) implies no lower limit on the date range.
   * @member {Number} firstDateValue
   */
  exports.prototype['firstDateValue'] = undefined;
  /**
   * Indicates whether the results should include (true) or exclude (false) an exact match for the firstDateValue. Default \"true\".
   * @member {Boolean} firstDateInclusive
   */
  exports.prototype['firstDateInclusive'] = undefined;
  /**
   * Last (high) date used to find objects within a date range.  Null (the default) implies no upper limit on the date range.
   * @member {Number} lastDateValue
   */
  exports.prototype['lastDateValue'] = undefined;
  /**
   * Indicates whether the results should include (true) or exclude (false) an exact match for the lastDateValue. Default \"true\".
   * @member {Boolean} lastDateInclusive
   */
  exports.prototype['lastDateInclusive'] = undefined;
  /**
   * Null test, suitable for finding fields containing a null value.
   * @member {Boolean} nullTest
   */
  exports.prototype['nullTest'] = undefined;
  /**
   * @member {Number} idValue
   */
  exports.prototype['idValue'] = undefined;
  /**
   * @member {module:model/SearchCriteria.IdTestEnum} idTest
   */
  exports.prototype['idTest'] = undefined;


  /**
   * Allowed values for the <code>numericTest</code> property.
   * @enum {String}
   * @readonly
   */
  exports.NumericTestEnum = {
    /**
     * value: "less-than"
     * @const
     */
    "less-than": "less-than",
    /**
     * value: "less-than-or-equal"
     * @const
     */
    "less-than-or-equal": "less-than-or-equal",
    /**
     * value: "equal"
     * @const
     */
    "equal": "equal",
    /**
     * value: "greater-than-or-equal"
     * @const
     */
    "greater-than-or-equal": "greater-than-or-equal",
    /**
     * value: "greater-than"
     * @const
     */
    "greater-than": "greater-than",
    /**
     * value: "not-equal"
     * @const
     */
    "not-equal": "not-equal"  };

  /**
   * Allowed values for the <code>stringTest</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StringTestEnum = {
    /**
     * value: "equal"
     * @const
     */
    "equal": "equal",
    /**
     * value: "not-equal"
     * @const
     */
    "not-equal": "not-equal"  };

  /**
   * Allowed values for the <code>choiceTest</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ChoiceTestEnum = {
    /**
     * value: "equal"
     * @const
     */
    "equal": "equal",
    /**
     * value: "not-equal"
     * @const
     */
    "not-equal": "not-equal"  };

  /**
   * Allowed values for the <code>idTest</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IdTestEnum = {
    /**
     * value: "less-than"
     * @const
     */
    "less-than": "less-than",
    /**
     * value: "less-than-or-equal"
     * @const
     */
    "less-than-or-equal": "less-than-or-equal",
    /**
     * value: "equal"
     * @const
     */
    "equal": "equal",
    /**
     * value: "greater-than-or-equal"
     * @const
     */
    "greater-than-or-equal": "greater-than-or-equal",
    /**
     * value: "greater-than"
     * @const
     */
    "greater-than": "greater-than",
    /**
     * value: "not-equal"
     * @const
     */
    "not-equal": "not-equal"  };


  return exports;
}));



