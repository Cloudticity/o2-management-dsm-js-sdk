/**
 * Trend Micro Deep Security API
 * Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.
 *
 * OpenAPI spec version: 12.0.446
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Deepsecurity) {
      root.Deepsecurity = {};
    }
    root.Deepsecurity.IntegrityMonitoringRule = factory(root.Deepsecurity.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The IntegrityMonitoringRule model module.
   * @module model/IntegrityMonitoringRule
   * @version 12.0.446
   */

  /**
   * Constructs a new <code>IntegrityMonitoringRule</code>.
   * Integrity monitoring rules describe how Deep Security Agents should scan for and detect changes to a computer&#39;s files, directories and registry keys and values as well as changes in installed software, processes, listening ports and running services. Integrity monitoring rules can be assigned directly to computers or can be made part of a policy.
   * @alias module:model/IntegrityMonitoringRule
   * @class
   */
  var exports = function() {
    var _this = this;




























  };

  /**
   * Constructs a <code>IntegrityMonitoringRule</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IntegrityMonitoringRule} obj Optional instance to populate.
   * @return {module:model/IntegrityMonitoringRule} The populated <code>IntegrityMonitoringRule</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('minimumAgentVersion')) {
        obj['minimumAgentVersion'] = ApiClient.convertToType(data['minimumAgentVersion'], 'String');
      }
      if (data.hasOwnProperty('minimumManagerVersion')) {
        obj['minimumManagerVersion'] = ApiClient.convertToType(data['minimumManagerVersion'], 'String');
      }
      if (data.hasOwnProperty('severity')) {
        obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('originalIssue')) {
        obj['originalIssue'] = ApiClient.convertToType(data['originalIssue'], 'Number');
      }
      if (data.hasOwnProperty('lastUpdated')) {
        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Number');
      }
      if (data.hasOwnProperty('identifier')) {
        obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
      }
      if (data.hasOwnProperty('template')) {
        obj['template'] = ApiClient.convertToType(data['template'], 'String');
      }
      if (data.hasOwnProperty('registryKeyRoot')) {
        obj['registryKeyRoot'] = ApiClient.convertToType(data['registryKeyRoot'], 'String');
      }
      if (data.hasOwnProperty('registryKeyValue')) {
        obj['registryKeyValue'] = ApiClient.convertToType(data['registryKeyValue'], 'String');
      }
      if (data.hasOwnProperty('registryIncludeSubKeys')) {
        obj['registryIncludeSubKeys'] = ApiClient.convertToType(data['registryIncludeSubKeys'], 'Boolean');
      }
      if (data.hasOwnProperty('registryIncludedValues')) {
        obj['registryIncludedValues'] = ApiClient.convertToType(data['registryIncludedValues'], ['String']);
      }
      if (data.hasOwnProperty('registryIncludeDefaultValue')) {
        obj['registryIncludeDefaultValue'] = ApiClient.convertToType(data['registryIncludeDefaultValue'], 'Boolean');
      }
      if (data.hasOwnProperty('registryExcludedValues')) {
        obj['registryExcludedValues'] = ApiClient.convertToType(data['registryExcludedValues'], ['String']);
      }
      if (data.hasOwnProperty('registryAttributes')) {
        obj['registryAttributes'] = ApiClient.convertToType(data['registryAttributes'], ['String']);
      }
      if (data.hasOwnProperty('fileBaseDirectory')) {
        obj['fileBaseDirectory'] = ApiClient.convertToType(data['fileBaseDirectory'], 'String');
      }
      if (data.hasOwnProperty('fileIncludeSubDirectories')) {
        obj['fileIncludeSubDirectories'] = ApiClient.convertToType(data['fileIncludeSubDirectories'], 'Boolean');
      }
      if (data.hasOwnProperty('fileIncludedValues')) {
        obj['fileIncludedValues'] = ApiClient.convertToType(data['fileIncludedValues'], ['String']);
      }
      if (data.hasOwnProperty('fileExcludedValues')) {
        obj['fileExcludedValues'] = ApiClient.convertToType(data['fileExcludedValues'], ['String']);
      }
      if (data.hasOwnProperty('fileAttributes')) {
        obj['fileAttributes'] = ApiClient.convertToType(data['fileAttributes'], ['String']);
      }
      if (data.hasOwnProperty('customXML')) {
        obj['customXML'] = ApiClient.convertToType(data['customXML'], 'String');
      }
      if (data.hasOwnProperty('alertEnabled')) {
        obj['alertEnabled'] = ApiClient.convertToType(data['alertEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('realTimeMonitoringEnabled')) {
        obj['realTimeMonitoringEnabled'] = ApiClient.convertToType(data['realTimeMonitoringEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('recommendationsMode')) {
        obj['recommendationsMode'] = ApiClient.convertToType(data['recommendationsMode'], 'String');
      }
      if (data.hasOwnProperty('ID')) {
        obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Name of the IntegrityMonitoringRule. Searchable as String.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Description of the IntegrityMonitoringRule. Searchable as String.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Minimum Deep Security Agent version that supports the IntegrityMonitoringRule. This value is provided in the X.X.X.X format. Defaults to `6.0.0.0`. If an agent is not the minimum required version, the manager does not send the rule to the agent, and generates an alert. Searchable as String.
   * @member {String} minimumAgentVersion
   */
  exports.prototype['minimumAgentVersion'] = undefined;
  /**
   * Minimum Deep Security Manager version that supports the IntegrityMonitoringRule. This value is provided in the X.X.X format. Defaults to `6.0.0`. An alert will be raised if a manager that fails to meet the minimum manager version value tries to assign this rule to a host or profile. Searchable as String.
   * @member {String} minimumManagerVersion
   */
  exports.prototype['minimumManagerVersion'] = undefined;
  /**
   * Severity level of the event is multiplied by the computer's asset value to determine ranking. Ranking can be used to sort events with more business impact. Searchable as Choice.
   * @member {module:model/IntegrityMonitoringRule.SeverityEnum} severity
   */
  exports.prototype['severity'] = undefined;
  /**
   * Type of the IntegrityMonitoringRule. If the rule is predefined by Trend Micro, it is set to `2`. If it is user created, it is set to `1`. Searchable as String.
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Timestamp when the IntegrityMonitoringRule was originally issued by Trend Micro, in milliseconds since epoch.  Empty if the IntegrityMonitoringRule is user created. Searchable as Date.
   * @member {Number} originalIssue
   */
  exports.prototype['originalIssue'] = undefined;
  /**
   * Timestamp when the IntegrityMonitoringRule was last updated, in milliseconds since epoch. Searchable as Date.
   * @member {Number} lastUpdated
   */
  exports.prototype['lastUpdated'] = undefined;
  /**
   * Identifier of the IntegrityMonitoringRule from Trend Micro. Empty if the IntegrityMonitoringRule is user created. Searchable as String.
   * @member {String} identifier
   */
  exports.prototype['identifier'] = undefined;
  /**
   * Template which the IntegrityMonitoringRule follows.
   * @member {module:model/IntegrityMonitoringRule.TemplateEnum} template
   */
  exports.prototype['template'] = undefined;
  /**
   * Registry hive which is monitored by the IntegrityMonitoringRule. Empty if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {String} registryKeyRoot
   */
  exports.prototype['registryKeyRoot'] = undefined;
  /**
   * Registry key which is monitored by the IntegrityMonitoringRule. Empty if the IntegrityMonitoringRule does not monitor a registry key. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {String} registryKeyValue
   */
  exports.prototype['registryKeyValue'] = undefined;
  /**
   * Controls whether the IntegrityMonitoringRule should also include subkeys of the registry key it monitors. Defaults to `false`. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {Boolean} registryIncludeSubKeys
   */
  exports.prototype['registryIncludeSubKeys'] = undefined;
  /**
   * Registry key values to be monitored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. `?` matches a single character, while `*` matches zero or more characters. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {Array.<String>} registryIncludedValues
   */
  exports.prototype['registryIncludedValues'] = undefined;
  /**
   * Controls whether the rule should monitor default registry key values. Defaults to `true`. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {Boolean} registryIncludeDefaultValue
   */
  exports.prototype['registryIncludeDefaultValue'] = undefined;
  /**
   * Registry key values to be ignored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. `?` matches a single character, while `*` matches zero or more characters. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {Array.<String>} registryExcludedValues
   */
  exports.prototype['registryExcludedValues'] = undefined;
  /**
   * Registry key attributes to be monitored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. Defaults to `STANDARD` which will monitor changes in registry size, content and type. Ignored if the IntegrityMonitoringRule does not monitor a registry key.
   * @member {Array.<String>} registryAttributes
   */
  exports.prototype['registryAttributes'] = undefined;
  /**
   * Base of the file directory to be monitored by the IntegrityMonitoringRule. Ignored if the IntegrityMonitoringRule does not monitor a file directory.
   * @member {String} fileBaseDirectory
   */
  exports.prototype['fileBaseDirectory'] = undefined;
  /**
   * Controls whether the IntegrityMonitoringRule should also monitor sub-directories of the base file directory that is associated with it. Defaults to `false`. Ignored if the IntegrityMonitoringRule does not monitor a file directory.
   * @member {Boolean} fileIncludeSubDirectories
   */
  exports.prototype['fileIncludeSubDirectories'] = undefined;
  /**
   * File name values to be monitored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. `?` matches a single character, while `*` matches zero or more characters. Leaving this field blank when monitoring file directories will cause the IntegrityMonitoringRule to monitor all files in a directory. This can use significant system resources if the base directory contains numerous or large files. Ignored if the IntegrityMonitoringRule does not monitor a file directory.
   * @member {Array.<String>} fileIncludedValues
   */
  exports.prototype['fileIncludedValues'] = undefined;
  /**
   * File name values to be ignored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. `?` matches a single character, while `*` matches zero or more characters. Ignored if the IntegrityMonitoringRule does not monitor a file directory.
   * @member {Array.<String>} fileExcludedValues
   */
  exports.prototype['fileExcludedValues'] = undefined;
  /**
   * File attributes to be monitored by the IntegrityMonitoringRule. JSON array or delimited by `\\n`. Defaults to `STANDARD` which will monitor changes in file creation date, last modified date, permissions, owner, group, size, content, flags (Windows) and SymLinkPath (Linux). Ignored if the IntegrityMonitoringRule does not monitor a file directory.
   * @member {Array.<String>} fileAttributes
   */
  exports.prototype['fileAttributes'] = undefined;
  /**
   * Custom XML rules to be used by the IntegrityMonitoringRule. Custom XML rules must be encoded in the Base64 format. Ignored if the IntegrityMonitoringRule does not follow the `custom` template.
   * @member {String} customXML
   */
  exports.prototype['customXML'] = undefined;
  /**
   * Controls whether an alert should be made if an event related to the IntegrityMonitoringRule is logged. Defaults to `false`. Searchable as Boolean.
   * @member {Boolean} alertEnabled
   */
  exports.prototype['alertEnabled'] = undefined;
  /**
   * Controls whether the IntegrityMonitoringRule is monitored in real time or during every scan. Defaults to `true` which indicates that it is monitored in real time. A value of `false` indicates that it will only be checked during scans. Searchable as Boolean.
   * @member {Boolean} realTimeMonitoringEnabled
   */
  exports.prototype['realTimeMonitoringEnabled'] = undefined;
  /**
   * Defines if the IntegrityMonitoringRule can/will be recommended by a recommendation scan. Defaults to `unknown` which means that it will not be recommended. Searchable as Choice.
   * @member {module:model/IntegrityMonitoringRule.RecommendationsModeEnum} recommendationsMode
   */
  exports.prototype['recommendationsMode'] = undefined;
  /**
   * ID of the IntegrityMonitoringRule. Searchable as ID.
   * @member {Number} ID
   */
  exports.prototype['ID'] = undefined;


  /**
   * Allowed values for the <code>severity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SeverityEnum = {
    /**
     * value: "low"
     * @const
     */
    "low": "low",
    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",
    /**
     * value: "high"
     * @const
     */
    "high": "high",
    /**
     * value: "critical"
     * @const
     */
    "critical": "critical"  };

  /**
   * Allowed values for the <code>template</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TemplateEnum = {
    /**
     * value: "registry"
     * @const
     */
    "registry": "registry",
    /**
     * value: "file"
     * @const
     */
    "file": "file",
    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"  };

  /**
   * Allowed values for the <code>recommendationsMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RecommendationsModeEnum = {
    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",
    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",
    /**
     * value: "ignored"
     * @const
     */
    "ignored": "ignored",
    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"  };


  return exports;
}));



